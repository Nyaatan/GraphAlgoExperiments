/* Generated by Cython 0.29.16 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "DoublyLinkedList.cpp",
            "DynamicArray.cpp",
            "Heap.cpp"
        ],
        "include_dirs": [
            "."
        ],
        "language": "c++",
        "name": "algorithms",
        "sources": [
            "algorithms.pyx",
            "DoublyLinkedList.cpp"
        ]
    },
    "module_name": "algorithms"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_16"
#define CYTHON_HEX_VERSION 0x001D10F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__algorithms
#define __PYX_HAVE_API__algorithms
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "Heap.cpp"
#include "DoublyLinkedList.cpp"
#include "DynamicArray.cpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "algorithms.pyx",
  "priorityqueue.pxd",
  "linked_list.pxd",
  "matrix.pxd",
  "cpath.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_13priorityqueue_CNode;
struct __pyx_obj_13priorityqueue_PriorityQueue;
struct __pyx_obj_11linked_list_PNode;
struct __pyx_obj_11linked_list_ListGraphRoot;
struct __pyx_obj_11linked_list_ListGraph;
struct __pyx_obj_6matrix_Matrix;
struct __pyx_obj_5cpath_CPathNode;
struct __pyx_obj_5cpath_CPath;

/* "priorityqueue.pxd":16
 *         int change_key(int, int)
 * 
 * cdef class CNode:             # <<<<<<<<<<<<<<
 *     cdef public int data
 *     cdef public int start
 */
struct __pyx_obj_13priorityqueue_CNode {
  PyObject_HEAD
  int data;
  int start;
  int end;
};


/* "priorityqueue.pxd":21
 *     cdef public int end
 * 
 * cdef class PriorityQueue:             # <<<<<<<<<<<<<<
 *     cpdef Heap* root
 *     cpdef int add(self, int val, int start, int end)
 */
struct __pyx_obj_13priorityqueue_PriorityQueue {
  PyObject_HEAD
  struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *__pyx_vtab;
  Heap *root;
};


/* "linked_list.pxd":22
 *         Node get(int)
 * 
 * cdef class PNode:             # <<<<<<<<<<<<<<
 *     cpdef PNode _prev
 *     cpdef PNode _next
 */
struct __pyx_obj_11linked_list_PNode {
  PyObject_HEAD
  struct __pyx_obj_11linked_list_PNode *_prev;
  struct __pyx_obj_11linked_list_PNode *_next;
  DoublyLinkedList *value;
};


/* "linked_list.pxd":27
 *     cpdef DoublyLinkedList* value
 * 
 * cdef class ListGraphRoot:             # <<<<<<<<<<<<<<
 *     cdef PNode front
 *     cdef PNode rear
 */
struct __pyx_obj_11linked_list_ListGraphRoot {
  PyObject_HEAD
  struct __pyx_vtabstruct_11linked_list_ListGraphRoot *__pyx_vtab;
  struct __pyx_obj_11linked_list_PNode *front;
  struct __pyx_obj_11linked_list_PNode *rear;
  int size;
};


/* "linked_list.pxd":50
 * 
 * 
 * cdef class ListGraph:             # <<<<<<<<<<<<<<
 *     cpdef ListGraphRoot root
 *     cpdef int size
 */
struct __pyx_obj_11linked_list_ListGraph {
  PyObject_HEAD
  struct __pyx_vtabstruct_11linked_list_ListGraph *__pyx_vtab;
  struct __pyx_obj_11linked_list_ListGraphRoot *root;
  int size;
};


/* "matrix.pxd":19
 *         void clear()
 * 
 * cdef class Matrix:             # <<<<<<<<<<<<<<
 *     cpdef DynamicArray** matrix
 *     cpdef int size
 */
struct __pyx_obj_6matrix_Matrix {
  PyObject_HEAD
  struct __pyx_vtabstruct_6matrix_Matrix *__pyx_vtab;
  DynamicArray **matrix;
  int size;
};


/* "cpath.pxd":2
 * 
 * cdef class CPathNode:             # <<<<<<<<<<<<<<
 *     cdef public:
 *         cpdef int s, e, w
 */
struct __pyx_obj_5cpath_CPathNode {
  PyObject_HEAD
  int s;
  int e;
  int w;
  struct __pyx_obj_5cpath_CPathNode *n_next;
};


/* "cpath.pxd":7
 *         cpdef CPathNode n_next
 * 
 * cdef class CPath:             # <<<<<<<<<<<<<<
 *     cpdef int maxnode
 *     cpdef str mode
 */
struct __pyx_obj_5cpath_CPath {
  PyObject_HEAD
  struct __pyx_vtabstruct_5cpath_CPath *__pyx_vtab;
  int maxnode;
  PyObject *mode;
  struct __pyx_obj_5cpath_CPathNode *first;
};



/* "priorityqueue.pxd":21
 *     cdef public int end
 * 
 * cdef class PriorityQueue:             # <<<<<<<<<<<<<<
 *     cpdef Heap* root
 *     cpdef int add(self, int val, int start, int end)
 */

struct __pyx_vtabstruct_13priorityqueue_PriorityQueue {
  int (*add)(struct __pyx_obj_13priorityqueue_PriorityQueue *, int, int, int, int __pyx_skip_dispatch);
  struct __pyx_obj_13priorityqueue_CNode *(*queue_pop)(struct __pyx_obj_13priorityqueue_PriorityQueue *);
  void (*tprint)(struct __pyx_obj_13priorityqueue_PriorityQueue *, int __pyx_skip_dispatch);
  int (*queue_update_node)(struct __pyx_obj_13priorityqueue_PriorityQueue *, int, int);
};
static struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *__pyx_vtabptr_13priorityqueue_PriorityQueue;


/* "linked_list.pxd":27
 *     cpdef DoublyLinkedList* value
 * 
 * cdef class ListGraphRoot:             # <<<<<<<<<<<<<<
 *     cdef PNode front
 *     cdef PNode rear
 */

struct __pyx_vtabstruct_11linked_list_ListGraphRoot {
  void (*add_front)(struct __pyx_obj_11linked_list_ListGraphRoot *, DoublyLinkedList *);
  void (*add_back)(struct __pyx_obj_11linked_list_ListGraphRoot *, DoublyLinkedList *);
  void (*add)(struct __pyx_obj_11linked_list_ListGraphRoot *, DoublyLinkedList *, int);
  struct __pyx_obj_11linked_list_PNode *(*_find)(struct __pyx_obj_11linked_list_ListGraphRoot *, int);
  DoublyLinkedList *(*get)(struct __pyx_obj_11linked_list_ListGraphRoot *, int);
  DoublyLinkedList *(*pop_front)(struct __pyx_obj_11linked_list_ListGraphRoot *);
  DoublyLinkedList *(*pop_back)(struct __pyx_obj_11linked_list_ListGraphRoot *);
  DoublyLinkedList *(*remove)(struct __pyx_obj_11linked_list_ListGraphRoot *, int);
  void (*check_index)(struct __pyx_obj_11linked_list_ListGraphRoot *, int, char);
};
static struct __pyx_vtabstruct_11linked_list_ListGraphRoot *__pyx_vtabptr_11linked_list_ListGraphRoot;


/* "linked_list.pxd":50
 * 
 * 
 * cdef class ListGraph:             # <<<<<<<<<<<<<<
 *     cpdef ListGraphRoot root
 *     cpdef int size
 */

struct __pyx_vtabstruct_11linked_list_ListGraph {
  void (*add_connection)(struct __pyx_obj_11linked_list_ListGraph *, int, int, int, int __pyx_skip_dispatch);
  void (*remove_connection)(struct __pyx_obj_11linked_list_ListGraph *, int, int, int __pyx_skip_dispatch);
  DoublyLinkedList *(*get_connections)(struct __pyx_obj_11linked_list_ListGraph *, int);
  PyObject *(*getsize)(struct __pyx_obj_11linked_list_ListGraph *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_11linked_list_ListGraph *__pyx_vtabptr_11linked_list_ListGraph;


/* "matrix.pxd":19
 *         void clear()
 * 
 * cdef class Matrix:             # <<<<<<<<<<<<<<
 *     cpdef DynamicArray** matrix
 *     cpdef int size
 */

struct __pyx_vtabstruct_6matrix_Matrix {
  int (*get)(struct __pyx_obj_6matrix_Matrix *, int, int, int __pyx_skip_dispatch);
  int (*set)(struct __pyx_obj_6matrix_Matrix *, int, int, int, int __pyx_skip_dispatch);
  void (*resize)(struct __pyx_obj_6matrix_Matrix *, int, int __pyx_skip_dispatch);
  PyObject *(*getsize)(struct __pyx_obj_6matrix_Matrix *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6matrix_Matrix *__pyx_vtabptr_6matrix_Matrix;


/* "cpath.pxd":7
 *         cpdef CPathNode n_next
 * 
 * cdef class CPath:             # <<<<<<<<<<<<<<
 *     cpdef int maxnode
 *     cpdef str mode
 */

struct __pyx_vtabstruct_5cpath_CPath {
  void (*add)(struct __pyx_obj_5cpath_CPath *, struct __pyx_obj_5cpath_CPathNode *);
};
static struct __pyx_vtabstruct_5cpath_CPath *__pyx_vtabptr_5cpath_CPath;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.mem' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'priorityqueue' */
static PyTypeObject *__pyx_ptype_13priorityqueue_CNode = 0;
static PyTypeObject *__pyx_ptype_13priorityqueue_PriorityQueue = 0;

/* Module declarations from 'linked_list' */
static PyTypeObject *__pyx_ptype_11linked_list_PNode = 0;
static PyTypeObject *__pyx_ptype_11linked_list_ListGraphRoot = 0;
static PyTypeObject *__pyx_ptype_11linked_list_ListGraph = 0;

/* Module declarations from 'matrix' */
static PyTypeObject *__pyx_ptype_6matrix_Matrix = 0;

/* Module declarations from 'cpath' */
static PyTypeObject *__pyx_ptype_5cpath_CPathNode = 0;
static PyTypeObject *__pyx_ptype_5cpath_CPath = 0;

/* Module declarations from 'algorithms' */
static int __pyx_v_10algorithms_MAX_INT;
static struct __pyx_obj_11linked_list_ListGraph *__pyx_f_10algorithms_prim_list(struct __pyx_obj_11linked_list_ListGraph *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_6matrix_Matrix *__pyx_f_10algorithms_prim_matrix(struct __pyx_obj_6matrix_Matrix *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_11linked_list_ListGraph *__pyx_f_10algorithms_kruskal_list(struct __pyx_obj_11linked_list_ListGraph *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_6matrix_Matrix *__pyx_f_10algorithms_kruskal_matrix(struct __pyx_obj_6matrix_Matrix *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_5cpath_CPath *__pyx_f_10algorithms_dijkstra_list(struct __pyx_obj_11linked_list_ListGraph *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_5cpath_CPath *__pyx_f_10algorithms_dijkstra_matrix(struct __pyx_obj_6matrix_Matrix *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_5cpath_CPath *__pyx_f_10algorithms_ford_bellman_list(struct __pyx_obj_11linked_list_ListGraph *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_obj_5cpath_CPath *__pyx_f_10algorithms_ford_bellman_matrix(struct __pyx_obj_6matrix_Matrix *, PyObject *, int __pyx_skip_dispatch); /*proto*/
#define __Pyx_MODULE_NAME "algorithms"
extern int __pyx_module_is_main_algorithms;
int __pyx_module_is_main_algorithms = 0;

/* Implementation of 'algorithms' */
static PyObject *__pyx_builtin_range;
static const char __pyx_k_args[] = "args";
static const char __pyx_k_list[] = "list";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_graph[] = "graph";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_timer[] = "timer";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_matrix[] = "matrix";
static const char __pyx_k_timeit[] = "timeit";
static const char __pyx_k_ListGraph[] = "ListGraph";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_linked_list[] = "linked_list";
static const char __pyx_k_PriorityQueue[] = "PriorityQueue";
static const char __pyx_k_default_timer[] = "default_timer";
static const char __pyx_k_priorityqueue[] = "priorityqueue";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static PyObject *__pyx_n_s_ListGraph;
static PyObject *__pyx_n_s_PriorityQueue;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_default_timer;
static PyObject *__pyx_n_s_graph;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_linked_list;
static PyObject *__pyx_n_s_list;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_priorityqueue;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_timeit;
static PyObject *__pyx_n_s_timer;
static PyObject *__pyx_pf_10algorithms_prim_list(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_10algorithms_2prim_matrix(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_10algorithms_4kruskal_list(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_10algorithms_6kruskal_matrix(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_10algorithms_8dijkstra_list(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_10algorithms_10dijkstra_matrix(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_10algorithms_12ford_bellman_list(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_10algorithms_14ford_bellman_matrix(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
/* Late includes */

/* "algorithms.pyx":19
 * cdef int MAX_INT = 2147483000
 * 
 * cpdef ListGraph prim_list(ListGraph graph, tuple args):             # <<<<<<<<<<<<<<
 * 
 *     cdef int starting_vertex = args[0]
 */

static PyObject *__pyx_pw_10algorithms_1prim_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_11linked_list_ListGraph *__pyx_f_10algorithms_prim_list(struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, PyObject *__pyx_v_args, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_starting_vertex;
  struct __pyx_obj_11linked_list_ListGraph *__pyx_v_result = 0;
  struct __pyx_obj_13priorityqueue_PriorityQueue *__pyx_v_queue = 0;
  DoublyLinkedList *__pyx_v_start_connections;
  bool *__pyx_v_visited;
  int __pyx_v_i;
  int __pyx_v_visited_count;
  struct __pyx_obj_13priorityqueue_CNode *__pyx_v_next_node = 0;
  DoublyLinkedList *__pyx_v_connections;
  struct __pyx_obj_11linked_list_ListGraph *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  DoublyLinkedList *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("prim_list", 0);

  /* "algorithms.pyx":21
 * cpdef ListGraph prim_list(ListGraph graph, tuple args):
 * 
 *     cdef int starting_vertex = args[0]             # <<<<<<<<<<<<<<
 *     cpdef ListGraph result = ListGraph(graph.root.size)
 *     cdef PriorityQueue queue = PriorityQueue()
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 21, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_starting_vertex = __pyx_t_2;

  /* "algorithms.pyx":22
 * 
 *     cdef int starting_vertex = args[0]
 *     cpdef ListGraph result = ListGraph(graph.root.size)             # <<<<<<<<<<<<<<
 *     cdef PriorityQueue queue = PriorityQueue()
 *     cdef DoublyLinkedList* start_connections = new DoublyLinkedList()
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_graph->root->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_11linked_list_ListGraph), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_11linked_list_ListGraph *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "algorithms.pyx":23
 *     cdef int starting_vertex = args[0]
 *     cpdef ListGraph result = ListGraph(graph.root.size)
 *     cdef PriorityQueue queue = PriorityQueue()             # <<<<<<<<<<<<<<
 *     cdef DoublyLinkedList* start_connections = new DoublyLinkedList()
 *     cdef bool* visited = <bool*> PyMem_Malloc(graph.size*sizeof(bool))
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_13priorityqueue_PriorityQueue)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_queue = ((struct __pyx_obj_13priorityqueue_PriorityQueue *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "algorithms.pyx":24
 *     cpdef ListGraph result = ListGraph(graph.root.size)
 *     cdef PriorityQueue queue = PriorityQueue()
 *     cdef DoublyLinkedList* start_connections = new DoublyLinkedList()             # <<<<<<<<<<<<<<
 *     cdef bool* visited = <bool*> PyMem_Malloc(graph.size*sizeof(bool))
 *     cdef int i = 0
 */
  try {
    __pyx_t_4 = new DoublyLinkedList();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 24, __pyx_L1_error)
  }
  __pyx_v_start_connections = __pyx_t_4;

  /* "algorithms.pyx":25
 *     cdef PriorityQueue queue = PriorityQueue()
 *     cdef DoublyLinkedList* start_connections = new DoublyLinkedList()
 *     cdef bool* visited = <bool*> PyMem_Malloc(graph.size*sizeof(bool))             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef int visited_count = 0
 */
  __pyx_v_visited = ((bool *)PyMem_Malloc((__pyx_v_graph->size * (sizeof(bool)))));

  /* "algorithms.pyx":26
 *     cdef DoublyLinkedList* start_connections = new DoublyLinkedList()
 *     cdef bool* visited = <bool*> PyMem_Malloc(graph.size*sizeof(bool))
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef int visited_count = 0
 *     visited[starting_vertex] = True
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":27
 *     cdef bool* visited = <bool*> PyMem_Malloc(graph.size*sizeof(bool))
 *     cdef int i = 0
 *     cdef int visited_count = 0             # <<<<<<<<<<<<<<
 *     visited[starting_vertex] = True
 * 
 */
  __pyx_v_visited_count = 0;

  /* "algorithms.pyx":28
 *     cdef int i = 0
 *     cdef int visited_count = 0
 *     visited[starting_vertex] = True             # <<<<<<<<<<<<<<
 * 
 *     i = 0
 */
  (__pyx_v_visited[__pyx_v_starting_vertex]) = 1;

  /* "algorithms.pyx":30
 *     visited[starting_vertex] = True
 * 
 *     i = 0             # <<<<<<<<<<<<<<
 *     for i in range(graph.root.get(starting_vertex).size):
 *         start_connections.add_back(
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":31
 * 
 *     i = 0
 *     for i in range(graph.root.get(starting_vertex).size):             # <<<<<<<<<<<<<<
 *         start_connections.add_back(
 *             graph.root.get(starting_vertex).get(i).value,
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_11linked_list_ListGraphRoot *)__pyx_v_graph->root->__pyx_vtab)->get(__pyx_v_graph->root, __pyx_v_starting_vertex)->size;
  __pyx_t_5 = __pyx_t_2;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "algorithms.pyx":32
 *     i = 0
 *     for i in range(graph.root.get(starting_vertex).size):
 *         start_connections.add_back(             # <<<<<<<<<<<<<<
 *             graph.root.get(starting_vertex).get(i).value,
 *             graph.root.get(starting_vertex).get(i).weight)
 */
    __pyx_v_start_connections->add_back(((struct __pyx_vtabstruct_11linked_list_ListGraphRoot *)__pyx_v_graph->root->__pyx_vtab)->get(__pyx_v_graph->root, __pyx_v_starting_vertex)->get(__pyx_v_i).value, ((struct __pyx_vtabstruct_11linked_list_ListGraphRoot *)__pyx_v_graph->root->__pyx_vtab)->get(__pyx_v_graph->root, __pyx_v_starting_vertex)->get(__pyx_v_i).weight);
  }

  /* "algorithms.pyx":36
 *             graph.root.get(starting_vertex).get(i).weight)
 * 
 *     for i in range(graph.size):             # <<<<<<<<<<<<<<
 *         visited[i] = False
 * 
 */
  __pyx_t_2 = __pyx_v_graph->size;
  __pyx_t_5 = __pyx_t_2;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "algorithms.pyx":37
 * 
 *     for i in range(graph.size):
 *         visited[i] = False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_visited[__pyx_v_i]) = 0;
  }

  /* "algorithms.pyx":40
 * 
 * 
 *     i = 0             # <<<<<<<<<<<<<<
 *     for i in range(start_connections.size):
 *         queue.add(start_connections.get(i).weight, starting_vertex, start_connections.get(i).value)
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":41
 * 
 *     i = 0
 *     for i in range(start_connections.size):             # <<<<<<<<<<<<<<
 *         queue.add(start_connections.get(i).weight, starting_vertex, start_connections.get(i).value)
 * 
 */
  __pyx_t_2 = __pyx_v_start_connections->size;
  __pyx_t_5 = __pyx_t_2;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "algorithms.pyx":42
 *     i = 0
 *     for i in range(start_connections.size):
 *         queue.add(start_connections.get(i).weight, starting_vertex, start_connections.get(i).value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (void)(((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->add(__pyx_v_queue, __pyx_v_start_connections->get(__pyx_v_i).weight, __pyx_v_starting_vertex, __pyx_v_start_connections->get(__pyx_v_i).value, 0));
  }

  /* "algorithms.pyx":45
 * 
 * 
 *     cdef CNode next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 * 
 *     cdef DoublyLinkedList* connections = new DoublyLinkedList()
 */
  __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_next_node = ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "algorithms.pyx":47
 *     cdef CNode next_node = queue.queue_pop()
 * 
 *     cdef DoublyLinkedList* connections = new DoublyLinkedList()             # <<<<<<<<<<<<<<
 *     while next_node is not None:
 *         connections = graph.get_connections(next_node.end)
 */
  try {
    __pyx_t_4 = new DoublyLinkedList();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 47, __pyx_L1_error)
  }
  __pyx_v_connections = __pyx_t_4;

  /* "algorithms.pyx":48
 * 
 *     cdef DoublyLinkedList* connections = new DoublyLinkedList()
 *     while next_node is not None:             # <<<<<<<<<<<<<<
 *         connections = graph.get_connections(next_node.end)
 *         i = 0
 */
  while (1) {
    __pyx_t_7 = (((PyObject *)__pyx_v_next_node) != Py_None);
    __pyx_t_8 = (__pyx_t_7 != 0);
    if (!__pyx_t_8) break;

    /* "algorithms.pyx":49
 *     cdef DoublyLinkedList* connections = new DoublyLinkedList()
 *     while next_node is not None:
 *         connections = graph.get_connections(next_node.end)             # <<<<<<<<<<<<<<
 *         i = 0
 *         # start = timer()
 */
    __pyx_v_connections = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->get_connections(__pyx_v_graph, __pyx_v_next_node->end);

    /* "algorithms.pyx":50
 *     while next_node is not None:
 *         connections = graph.get_connections(next_node.end)
 *         i = 0             # <<<<<<<<<<<<<<
 *         # start = timer()
 *         for i in range(connections.size):
 */
    __pyx_v_i = 0;

    /* "algorithms.pyx":52
 *         i = 0
 *         # start = timer()
 *         for i in range(connections.size):             # <<<<<<<<<<<<<<
 *             if not visited[connections.get(i).value]:
 *                 queue.add(connections.get(i).weight, next_node.end, connections.get(i).value)
 */
    __pyx_t_2 = __pyx_v_connections->size;
    __pyx_t_5 = __pyx_t_2;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "algorithms.pyx":53
 *         # start = timer()
 *         for i in range(connections.size):
 *             if not visited[connections.get(i).value]:             # <<<<<<<<<<<<<<
 *                 queue.add(connections.get(i).weight, next_node.end, connections.get(i).value)
 *         # end = timer()
 */
      __pyx_t_8 = ((!((__pyx_v_visited[__pyx_v_connections->get(__pyx_v_i).value]) != 0)) != 0);
      if (__pyx_t_8) {

        /* "algorithms.pyx":54
 *         for i in range(connections.size):
 *             if not visited[connections.get(i).value]:
 *                 queue.add(connections.get(i).weight, next_node.end, connections.get(i).value)             # <<<<<<<<<<<<<<
 *         # end = timer()
 *         if not visited[next_node.end]:
 */
        (void)(((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->add(__pyx_v_queue, __pyx_v_connections->get(__pyx_v_i).weight, __pyx_v_next_node->end, __pyx_v_connections->get(__pyx_v_i).value, 0));

        /* "algorithms.pyx":53
 *         # start = timer()
 *         for i in range(connections.size):
 *             if not visited[connections.get(i).value]:             # <<<<<<<<<<<<<<
 *                 queue.add(connections.get(i).weight, next_node.end, connections.get(i).value)
 *         # end = timer()
 */
      }
    }

    /* "algorithms.pyx":56
 *                 queue.add(connections.get(i).weight, next_node.end, connections.get(i).value)
 *         # end = timer()
 *         if not visited[next_node.end]:             # <<<<<<<<<<<<<<
 *             # print(i)
 *             visited[next_node.end] = True
 */
    __pyx_t_8 = ((!((__pyx_v_visited[__pyx_v_next_node->end]) != 0)) != 0);
    if (__pyx_t_8) {

      /* "algorithms.pyx":58
 *         if not visited[next_node.end]:
 *             # print(i)
 *             visited[next_node.end] = True             # <<<<<<<<<<<<<<
 *             result.add_connection(next_node.start, next_node.end, next_node.data)
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 */
      (__pyx_v_visited[__pyx_v_next_node->end]) = 1;

      /* "algorithms.pyx":59
 *             # print(i)
 *             visited[next_node.end] = True
 *             result.add_connection(next_node.start, next_node.end, next_node.data)             # <<<<<<<<<<<<<<
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 */
      ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_result->__pyx_vtab)->add_connection(__pyx_v_result, __pyx_v_next_node->start, __pyx_v_next_node->end, __pyx_v_next_node->data, 0);

      /* "algorithms.pyx":60
 *             visited[next_node.end] = True
 *             result.add_connection(next_node.start, next_node.end, next_node.data)
 *             result.add_connection(next_node.end, next_node.start, next_node.data)             # <<<<<<<<<<<<<<
 *             visited_count += 1
 *             if visited_count == graph.size:
 */
      ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_result->__pyx_vtab)->add_connection(__pyx_v_result, __pyx_v_next_node->end, __pyx_v_next_node->start, __pyx_v_next_node->data, 0);

      /* "algorithms.pyx":61
 *             result.add_connection(next_node.start, next_node.end, next_node.data)
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1             # <<<<<<<<<<<<<<
 *             if visited_count == graph.size:
 *                 break
 */
      __pyx_v_visited_count = (__pyx_v_visited_count + 1);

      /* "algorithms.pyx":62
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *             if visited_count == graph.size:             # <<<<<<<<<<<<<<
 *                 break
 *         next_node = queue.queue_pop()
 */
      __pyx_t_8 = ((__pyx_v_visited_count == __pyx_v_graph->size) != 0);
      if (__pyx_t_8) {

        /* "algorithms.pyx":63
 *             visited_count += 1
 *             if visited_count == graph.size:
 *                 break             # <<<<<<<<<<<<<<
 *         next_node = queue.queue_pop()
 *     PyMem_Free(visited)
 */
        goto __pyx_L10_break;

        /* "algorithms.pyx":62
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *             if visited_count == graph.size:             # <<<<<<<<<<<<<<
 *                 break
 *         next_node = queue.queue_pop()
 */
      }

      /* "algorithms.pyx":56
 *                 queue.add(connections.get(i).weight, next_node.end, connections.get(i).value)
 *         # end = timer()
 *         if not visited[next_node.end]:             # <<<<<<<<<<<<<<
 *             # print(i)
 *             visited[next_node.end] = True
 */
    }

    /* "algorithms.pyx":64
 *             if visited_count == graph.size:
 *                 break
 *         next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 *     PyMem_Free(visited)
 *     del queue
 */
    __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_next_node, ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_3));
    __pyx_t_3 = 0;
  }
  __pyx_L10_break:;

  /* "algorithms.pyx":65
 *                 break
 *         next_node = queue.queue_pop()
 *     PyMem_Free(visited)             # <<<<<<<<<<<<<<
 *     del queue
 *     return result
 */
  PyMem_Free(__pyx_v_visited);

  /* "algorithms.pyx":66
 *         next_node = queue.queue_pop()
 *     PyMem_Free(visited)
 *     del queue             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __Pyx_DECREF(((PyObject *)__pyx_v_queue));
  __pyx_v_queue = NULL;

  /* "algorithms.pyx":67
 *     PyMem_Free(visited)
 *     del queue
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cpdef Matrix prim_matrix(Matrix graph, tuple args):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "algorithms.pyx":19
 * cdef int MAX_INT = 2147483000
 * 
 * cpdef ListGraph prim_list(ListGraph graph, tuple args):             # <<<<<<<<<<<<<<
 * 
 *     cdef int starting_vertex = args[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("algorithms.prim_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_queue);
  __Pyx_XDECREF((PyObject *)__pyx_v_next_node);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10algorithms_1prim_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10algorithms_1prim_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prim_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_args,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prim_list", 1, 2, 2, 1); __PYX_ERR(0, 19, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prim_list") < 0)) __PYX_ERR(0, 19, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_11linked_list_ListGraph *)values[0]);
    __pyx_v_args = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prim_list", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 19, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("algorithms.prim_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_11linked_list_ListGraph, 1, "graph", 0))) __PYX_ERR(0, 19, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_args), (&PyTuple_Type), 1, "args", 1))) __PYX_ERR(0, 19, __pyx_L1_error)
  __pyx_r = __pyx_pf_10algorithms_prim_list(__pyx_self, __pyx_v_graph, __pyx_v_args);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10algorithms_prim_list(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("prim_list", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_10algorithms_prim_list(__pyx_v_graph, __pyx_v_args, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("algorithms.prim_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "algorithms.pyx":69
 *     return result
 * 
 * cpdef Matrix prim_matrix(Matrix graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef starting_vertex = args[0]
 *     cpdef Matrix result = Matrix(graph.size)
 */

static PyObject *__pyx_pw_10algorithms_3prim_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6matrix_Matrix *__pyx_f_10algorithms_prim_matrix(struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, PyObject *__pyx_v_args, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_starting_vertex = 0;
  struct __pyx_obj_6matrix_Matrix *__pyx_v_result = 0;
  struct __pyx_obj_13priorityqueue_PriorityQueue *__pyx_v_queue = 0;
  bool *__pyx_v_visited;
  int __pyx_v_i;
  int __pyx_v_visited_count;
  struct __pyx_obj_13priorityqueue_CNode *__pyx_v_next_node = 0;
  struct __pyx_obj_6matrix_Matrix *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("prim_matrix", 0);

  /* "algorithms.pyx":70
 * 
 * cpdef Matrix prim_matrix(Matrix graph, tuple args):
 *     cdef starting_vertex = args[0]             # <<<<<<<<<<<<<<
 *     cpdef Matrix result = Matrix(graph.size)
 *     cdef PriorityQueue queue = PriorityQueue()
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 70, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_starting_vertex = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "algorithms.pyx":71
 * cpdef Matrix prim_matrix(Matrix graph, tuple args):
 *     cdef starting_vertex = args[0]
 *     cpdef Matrix result = Matrix(graph.size)             # <<<<<<<<<<<<<<
 *     cdef PriorityQueue queue = PriorityQueue()
 *     cdef bool* visited = <bool*> PyMem_Malloc(graph.size*sizeof(bool))
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_graph->size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6matrix_Matrix), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_6matrix_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "algorithms.pyx":72
 *     cdef starting_vertex = args[0]
 *     cpdef Matrix result = Matrix(graph.size)
 *     cdef PriorityQueue queue = PriorityQueue()             # <<<<<<<<<<<<<<
 *     cdef bool* visited = <bool*> PyMem_Malloc(graph.size*sizeof(bool))
 *     cdef int i = 0
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_13priorityqueue_PriorityQueue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_queue = ((struct __pyx_obj_13priorityqueue_PriorityQueue *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "algorithms.pyx":73
 *     cpdef Matrix result = Matrix(graph.size)
 *     cdef PriorityQueue queue = PriorityQueue()
 *     cdef bool* visited = <bool*> PyMem_Malloc(graph.size*sizeof(bool))             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef int visited_count = 0
 */
  __pyx_v_visited = ((bool *)PyMem_Malloc((__pyx_v_graph->size * (sizeof(bool)))));

  /* "algorithms.pyx":74
 *     cdef PriorityQueue queue = PriorityQueue()
 *     cdef bool* visited = <bool*> PyMem_Malloc(graph.size*sizeof(bool))
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef int visited_count = 0
 *     visited[starting_vertex] = True
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":75
 *     cdef bool* visited = <bool*> PyMem_Malloc(graph.size*sizeof(bool))
 *     cdef int i = 0
 *     cdef int visited_count = 0             # <<<<<<<<<<<<<<
 *     visited[starting_vertex] = True
 * 
 */
  __pyx_v_visited_count = 0;

  /* "algorithms.pyx":76
 *     cdef int i = 0
 *     cdef int visited_count = 0
 *     visited[starting_vertex] = True             # <<<<<<<<<<<<<<
 * 
 *     i = 0
 */
  __pyx_t_3 = __Pyx_PyIndex_AsSsize_t(__pyx_v_starting_vertex); if (unlikely((__pyx_t_3 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 76, __pyx_L1_error)
  (__pyx_v_visited[__pyx_t_3]) = 1;

  /* "algorithms.pyx":78
 *     visited[starting_vertex] = True
 * 
 *     i = 0             # <<<<<<<<<<<<<<
 *     for i in range(graph.size):
 *         visited[i] = False
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":79
 * 
 *     i = 0
 *     for i in range(graph.size):             # <<<<<<<<<<<<<<
 *         visited[i] = False
 * 
 */
  __pyx_t_4 = __pyx_v_graph->size;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "algorithms.pyx":80
 *     i = 0
 *     for i in range(graph.size):
 *         visited[i] = False             # <<<<<<<<<<<<<<
 * 
 *     i = 0
 */
    (__pyx_v_visited[__pyx_v_i]) = 0;
  }

  /* "algorithms.pyx":82
 *         visited[i] = False
 * 
 *     i = 0             # <<<<<<<<<<<<<<
 *     for i in range(graph.size):
 *         if graph.get(starting_vertex, i) > 0:
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":83
 * 
 *     i = 0
 *     for i in range(graph.size):             # <<<<<<<<<<<<<<
 *         if graph.get(starting_vertex, i) > 0:
 *             queue.add(graph.get(starting_vertex, i), starting_vertex, i)
 */
  __pyx_t_4 = __pyx_v_graph->size;
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "algorithms.pyx":84
 *     i = 0
 *     for i in range(graph.size):
 *         if graph.get(starting_vertex, i) > 0:             # <<<<<<<<<<<<<<
 *             queue.add(graph.get(starting_vertex, i), starting_vertex, i)
 * 
 */
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_starting_vertex); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 84, __pyx_L1_error)
    __pyx_t_8 = ((((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_t_7, __pyx_v_i, 0) > 0) != 0);
    if (__pyx_t_8) {

      /* "algorithms.pyx":85
 *     for i in range(graph.size):
 *         if graph.get(starting_vertex, i) > 0:
 *             queue.add(graph.get(starting_vertex, i), starting_vertex, i)             # <<<<<<<<<<<<<<
 * 
 *     cdef CNode next_node = queue.queue_pop()
 */
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_starting_vertex); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_v_starting_vertex); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
      (void)(((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->add(__pyx_v_queue, ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_t_7, __pyx_v_i, 0), __pyx_t_9, __pyx_v_i, 0));

      /* "algorithms.pyx":84
 *     i = 0
 *     for i in range(graph.size):
 *         if graph.get(starting_vertex, i) > 0:             # <<<<<<<<<<<<<<
 *             queue.add(graph.get(starting_vertex, i), starting_vertex, i)
 * 
 */
    }
  }

  /* "algorithms.pyx":87
 *             queue.add(graph.get(starting_vertex, i), starting_vertex, i)
 * 
 *     cdef CNode next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 *     while next_node is not None:
 *         i = 0
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_next_node = ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "algorithms.pyx":88
 * 
 *     cdef CNode next_node = queue.queue_pop()
 *     while next_node is not None:             # <<<<<<<<<<<<<<
 *         i = 0
 *         for i in range(graph.size):
 */
  while (1) {
    __pyx_t_8 = (((PyObject *)__pyx_v_next_node) != Py_None);
    __pyx_t_10 = (__pyx_t_8 != 0);
    if (!__pyx_t_10) break;

    /* "algorithms.pyx":89
 *     cdef CNode next_node = queue.queue_pop()
 *     while next_node is not None:
 *         i = 0             # <<<<<<<<<<<<<<
 *         for i in range(graph.size):
 *             if not visited[i] and graph.get(next_node.end, i) > 0:
 */
    __pyx_v_i = 0;

    /* "algorithms.pyx":90
 *     while next_node is not None:
 *         i = 0
 *         for i in range(graph.size):             # <<<<<<<<<<<<<<
 *             if not visited[i] and graph.get(next_node.end, i) > 0:
 *                 queue.add(graph.get(next_node.end, i), next_node.end, i)
 */
    __pyx_t_4 = __pyx_v_graph->size;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "algorithms.pyx":91
 *         i = 0
 *         for i in range(graph.size):
 *             if not visited[i] and graph.get(next_node.end, i) > 0:             # <<<<<<<<<<<<<<
 *                 queue.add(graph.get(next_node.end, i), next_node.end, i)
 *         if not visited[next_node.end]:
 */
      __pyx_t_8 = ((!((__pyx_v_visited[__pyx_v_i]) != 0)) != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_10 = __pyx_t_8;
        goto __pyx_L13_bool_binop_done;
      }
      __pyx_t_8 = ((((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_v_next_node->end, __pyx_v_i, 0) > 0) != 0);
      __pyx_t_10 = __pyx_t_8;
      __pyx_L13_bool_binop_done:;
      if (__pyx_t_10) {

        /* "algorithms.pyx":92
 *         for i in range(graph.size):
 *             if not visited[i] and graph.get(next_node.end, i) > 0:
 *                 queue.add(graph.get(next_node.end, i), next_node.end, i)             # <<<<<<<<<<<<<<
 *         if not visited[next_node.end]:
 *             visited[next_node.end] = True
 */
        (void)(((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->add(__pyx_v_queue, ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_v_next_node->end, __pyx_v_i, 0), __pyx_v_next_node->end, __pyx_v_i, 0));

        /* "algorithms.pyx":91
 *         i = 0
 *         for i in range(graph.size):
 *             if not visited[i] and graph.get(next_node.end, i) > 0:             # <<<<<<<<<<<<<<
 *                 queue.add(graph.get(next_node.end, i), next_node.end, i)
 *         if not visited[next_node.end]:
 */
      }
    }

    /* "algorithms.pyx":93
 *             if not visited[i] and graph.get(next_node.end, i) > 0:
 *                 queue.add(graph.get(next_node.end, i), next_node.end, i)
 *         if not visited[next_node.end]:             # <<<<<<<<<<<<<<
 *             visited[next_node.end] = True
 *             visited_count += 1
 */
    __pyx_t_10 = ((!((__pyx_v_visited[__pyx_v_next_node->end]) != 0)) != 0);
    if (__pyx_t_10) {

      /* "algorithms.pyx":94
 *                 queue.add(graph.get(next_node.end, i), next_node.end, i)
 *         if not visited[next_node.end]:
 *             visited[next_node.end] = True             # <<<<<<<<<<<<<<
 *             visited_count += 1
 *             result.set(next_node.start, next_node.end, next_node.data)
 */
      (__pyx_v_visited[__pyx_v_next_node->end]) = 1;

      /* "algorithms.pyx":95
 *         if not visited[next_node.end]:
 *             visited[next_node.end] = True
 *             visited_count += 1             # <<<<<<<<<<<<<<
 *             result.set(next_node.start, next_node.end, next_node.data)
 *             result.set(next_node.end, next_node.start, next_node.data)
 */
      __pyx_v_visited_count = (__pyx_v_visited_count + 1);

      /* "algorithms.pyx":96
 *             visited[next_node.end] = True
 *             visited_count += 1
 *             result.set(next_node.start, next_node.end, next_node.data)             # <<<<<<<<<<<<<<
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             if visited_count == graph.size:
 */
      (void)(((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_result->__pyx_vtab)->set(__pyx_v_result, __pyx_v_next_node->start, __pyx_v_next_node->end, __pyx_v_next_node->data, 0));

      /* "algorithms.pyx":97
 *             visited_count += 1
 *             result.set(next_node.start, next_node.end, next_node.data)
 *             result.set(next_node.end, next_node.start, next_node.data)             # <<<<<<<<<<<<<<
 *             if visited_count == graph.size:
 *                 break
 */
      (void)(((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_result->__pyx_vtab)->set(__pyx_v_result, __pyx_v_next_node->end, __pyx_v_next_node->start, __pyx_v_next_node->data, 0));

      /* "algorithms.pyx":98
 *             result.set(next_node.start, next_node.end, next_node.data)
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             if visited_count == graph.size:             # <<<<<<<<<<<<<<
 *                 break
 *         next_node = queue.queue_pop()
 */
      __pyx_t_10 = ((__pyx_v_visited_count == __pyx_v_graph->size) != 0);
      if (__pyx_t_10) {

        /* "algorithms.pyx":99
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             if visited_count == graph.size:
 *                 break             # <<<<<<<<<<<<<<
 *         next_node = queue.queue_pop()
 *     PyMem_Free(visited)
 */
        goto __pyx_L9_break;

        /* "algorithms.pyx":98
 *             result.set(next_node.start, next_node.end, next_node.data)
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             if visited_count == graph.size:             # <<<<<<<<<<<<<<
 *                 break
 *         next_node = queue.queue_pop()
 */
      }

      /* "algorithms.pyx":93
 *             if not visited[i] and graph.get(next_node.end, i) > 0:
 *                 queue.add(graph.get(next_node.end, i), next_node.end, i)
 *         if not visited[next_node.end]:             # <<<<<<<<<<<<<<
 *             visited[next_node.end] = True
 *             visited_count += 1
 */
    }

    /* "algorithms.pyx":100
 *             if visited_count == graph.size:
 *                 break
 *         next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 *     PyMem_Free(visited)
 *     del queue
 */
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_next_node, ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_2));
    __pyx_t_2 = 0;
  }
  __pyx_L9_break:;

  /* "algorithms.pyx":101
 *                 break
 *         next_node = queue.queue_pop()
 *     PyMem_Free(visited)             # <<<<<<<<<<<<<<
 *     del queue
 *     return result
 */
  PyMem_Free(__pyx_v_visited);

  /* "algorithms.pyx":102
 *         next_node = queue.queue_pop()
 *     PyMem_Free(visited)
 *     del queue             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __Pyx_DECREF(((PyObject *)__pyx_v_queue));
  __pyx_v_queue = NULL;

  /* "algorithms.pyx":103
 *     PyMem_Free(visited)
 *     del queue
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cpdef ListGraph kruskal_list(ListGraph graph, tuple args):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "algorithms.pyx":69
 *     return result
 * 
 * cpdef Matrix prim_matrix(Matrix graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef starting_vertex = args[0]
 *     cpdef Matrix result = Matrix(graph.size)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("algorithms.prim_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_starting_vertex);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_queue);
  __Pyx_XDECREF((PyObject *)__pyx_v_next_node);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10algorithms_3prim_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10algorithms_3prim_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6matrix_Matrix *__pyx_v_graph = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prim_matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_args,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("prim_matrix", 1, 2, 2, 1); __PYX_ERR(0, 69, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "prim_matrix") < 0)) __PYX_ERR(0, 69, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_6matrix_Matrix *)values[0]);
    __pyx_v_args = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("prim_matrix", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 69, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("algorithms.prim_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_6matrix_Matrix, 1, "graph", 0))) __PYX_ERR(0, 69, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_args), (&PyTuple_Type), 1, "args", 1))) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_r = __pyx_pf_10algorithms_2prim_matrix(__pyx_self, __pyx_v_graph, __pyx_v_args);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10algorithms_2prim_matrix(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("prim_matrix", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_10algorithms_prim_matrix(__pyx_v_graph, __pyx_v_args, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("algorithms.prim_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "algorithms.pyx":105
 *     return result
 * 
 * cpdef ListGraph kruskal_list(ListGraph graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef int visited_count = 0
 */

static PyObject *__pyx_pw_10algorithms_5kruskal_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_11linked_list_ListGraph *__pyx_f_10algorithms_kruskal_list(struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_visited_count;
  struct __pyx_obj_11linked_list_ListGraph *__pyx_v_result = 0;
  struct __pyx_obj_13priorityqueue_PriorityQueue *__pyx_v_queue = 0;
  DoublyLinkedList *__pyx_v_connections;
  int __pyx_v_max_group;
  int __pyx_v_j;
  int *__pyx_v_groups;
  struct __pyx_obj_13priorityqueue_CNode *__pyx_v_next_node = 0;
  int __pyx_v_old_group;
  struct __pyx_obj_11linked_list_ListGraph *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("kruskal_list", 0);

  /* "algorithms.pyx":106
 * 
 * cpdef ListGraph kruskal_list(ListGraph graph, tuple args):
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     cdef int visited_count = 0
 *     cpdef ListGraph result = ListGraph(graph.getsize())
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":107
 * cpdef ListGraph kruskal_list(ListGraph graph, tuple args):
 *     cdef int i = 0
 *     cdef int visited_count = 0             # <<<<<<<<<<<<<<
 *     cpdef ListGraph result = ListGraph(graph.getsize())
 *     cdef PriorityQueue queue = PriorityQueue()
 */
  __pyx_v_visited_count = 0;

  /* "algorithms.pyx":108
 *     cdef int i = 0
 *     cdef int visited_count = 0
 *     cpdef ListGraph result = ListGraph(graph.getsize())             # <<<<<<<<<<<<<<
 *     cdef PriorityQueue queue = PriorityQueue()
 *     cdef DoublyLinkedList* connections
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_11linked_list_ListGraph), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_11linked_list_ListGraph *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "algorithms.pyx":109
 *     cdef int visited_count = 0
 *     cpdef ListGraph result = ListGraph(graph.getsize())
 *     cdef PriorityQueue queue = PriorityQueue()             # <<<<<<<<<<<<<<
 *     cdef DoublyLinkedList* connections
 *     cdef int max_group = 0
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_13priorityqueue_PriorityQueue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_queue = ((struct __pyx_obj_13priorityqueue_PriorityQueue *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "algorithms.pyx":111
 *     cdef PriorityQueue queue = PriorityQueue()
 *     cdef DoublyLinkedList* connections
 *     cdef int max_group = 0             # <<<<<<<<<<<<<<
 *     cdef int j
 *     cdef int* groups = <int*> PyMem_Malloc(graph.size*sizeof(int))
 */
  __pyx_v_max_group = 0;

  /* "algorithms.pyx":113
 *     cdef int max_group = 0
 *     cdef int j
 *     cdef int* groups = <int*> PyMem_Malloc(graph.size*sizeof(int))             # <<<<<<<<<<<<<<
 *     for i in range(graph.size):
 *         groups[i] = -1
 */
  __pyx_v_groups = ((int *)PyMem_Malloc((__pyx_v_graph->size * (sizeof(int)))));

  /* "algorithms.pyx":114
 *     cdef int j
 *     cdef int* groups = <int*> PyMem_Malloc(graph.size*sizeof(int))
 *     for i in range(graph.size):             # <<<<<<<<<<<<<<
 *         groups[i] = -1
 *         connections = graph.get_connections(i)
 */
  __pyx_t_3 = __pyx_v_graph->size;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "algorithms.pyx":115
 *     cdef int* groups = <int*> PyMem_Malloc(graph.size*sizeof(int))
 *     for i in range(graph.size):
 *         groups[i] = -1             # <<<<<<<<<<<<<<
 *         connections = graph.get_connections(i)
 *         j = 0
 */
    (__pyx_v_groups[__pyx_v_i]) = -1;

    /* "algorithms.pyx":116
 *     for i in range(graph.size):
 *         groups[i] = -1
 *         connections = graph.get_connections(i)             # <<<<<<<<<<<<<<
 *         j = 0
 *         for j in range(connections.size):
 */
    __pyx_v_connections = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->get_connections(__pyx_v_graph, __pyx_v_i);

    /* "algorithms.pyx":117
 *         groups[i] = -1
 *         connections = graph.get_connections(i)
 *         j = 0             # <<<<<<<<<<<<<<
 *         for j in range(connections.size):
 *             queue.add(connections.get(j).weight, i, connections.get(j).value)
 */
    __pyx_v_j = 0;

    /* "algorithms.pyx":118
 *         connections = graph.get_connections(i)
 *         j = 0
 *         for j in range(connections.size):             # <<<<<<<<<<<<<<
 *             queue.add(connections.get(j).weight, i, connections.get(j).value)
 *     cdef CNode next_node = queue.queue_pop()
 */
    __pyx_t_6 = __pyx_v_connections->size;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "algorithms.pyx":119
 *         j = 0
 *         for j in range(connections.size):
 *             queue.add(connections.get(j).weight, i, connections.get(j).value)             # <<<<<<<<<<<<<<
 *     cdef CNode next_node = queue.queue_pop()
 *     visited_count += 1
 */
      (void)(((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->add(__pyx_v_queue, __pyx_v_connections->get(__pyx_v_j).weight, __pyx_v_i, __pyx_v_connections->get(__pyx_v_j).value, 0));
    }
  }

  /* "algorithms.pyx":120
 *         for j in range(connections.size):
 *             queue.add(connections.get(j).weight, i, connections.get(j).value)
 *     cdef CNode next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 *     visited_count += 1
 *     cdef int old_group
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_next_node = ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "algorithms.pyx":121
 *             queue.add(connections.get(j).weight, i, connections.get(j).value)
 *     cdef CNode next_node = queue.queue_pop()
 *     visited_count += 1             # <<<<<<<<<<<<<<
 *     cdef int old_group
 *     while next_node is not None:
 */
  __pyx_v_visited_count = (__pyx_v_visited_count + 1);

  /* "algorithms.pyx":123
 *     visited_count += 1
 *     cdef int old_group
 *     while next_node is not None:             # <<<<<<<<<<<<<<
 *         if groups[next_node.start] == -1 and groups[next_node.end] == -1:
 *             groups[next_node.start] = max_group
 */
  while (1) {
    __pyx_t_9 = (((PyObject *)__pyx_v_next_node) != Py_None);
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (!__pyx_t_10) break;

    /* "algorithms.pyx":124
 *     cdef int old_group
 *     while next_node is not None:
 *         if groups[next_node.start] == -1 and groups[next_node.end] == -1:             # <<<<<<<<<<<<<<
 *             groups[next_node.start] = max_group
 *             groups[next_node.end] = max_group
 */
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->start]) == -1L) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_10 = __pyx_t_9;
      goto __pyx_L10_bool_binop_done;
    }
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->end]) == -1L) != 0);
    __pyx_t_10 = __pyx_t_9;
    __pyx_L10_bool_binop_done:;
    if (__pyx_t_10) {

      /* "algorithms.pyx":125
 *     while next_node is not None:
 *         if groups[next_node.start] == -1 and groups[next_node.end] == -1:
 *             groups[next_node.start] = max_group             # <<<<<<<<<<<<<<
 *             groups[next_node.end] = max_group
 *             max_group += 1
 */
      (__pyx_v_groups[__pyx_v_next_node->start]) = __pyx_v_max_group;

      /* "algorithms.pyx":126
 *         if groups[next_node.start] == -1 and groups[next_node.end] == -1:
 *             groups[next_node.start] = max_group
 *             groups[next_node.end] = max_group             # <<<<<<<<<<<<<<
 *             max_group += 1
 *             result.add_connection(next_node.start, next_node.end, next_node.data)
 */
      (__pyx_v_groups[__pyx_v_next_node->end]) = __pyx_v_max_group;

      /* "algorithms.pyx":127
 *             groups[next_node.start] = max_group
 *             groups[next_node.end] = max_group
 *             max_group += 1             # <<<<<<<<<<<<<<
 *             result.add_connection(next_node.start, next_node.end, next_node.data)
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 */
      __pyx_v_max_group = (__pyx_v_max_group + 1);

      /* "algorithms.pyx":128
 *             groups[next_node.end] = max_group
 *             max_group += 1
 *             result.add_connection(next_node.start, next_node.end, next_node.data)             # <<<<<<<<<<<<<<
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 */
      ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_result->__pyx_vtab)->add_connection(__pyx_v_result, __pyx_v_next_node->start, __pyx_v_next_node->end, __pyx_v_next_node->data, 0);

      /* "algorithms.pyx":129
 *             max_group += 1
 *             result.add_connection(next_node.start, next_node.end, next_node.data)
 *             result.add_connection(next_node.end, next_node.start, next_node.data)             # <<<<<<<<<<<<<<
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \
 */
      ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_result->__pyx_vtab)->add_connection(__pyx_v_result, __pyx_v_next_node->end, __pyx_v_next_node->start, __pyx_v_next_node->data, 0);

      /* "algorithms.pyx":130
 *             result.add_connection(next_node.start, next_node.end, next_node.data)
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1             # <<<<<<<<<<<<<<
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 */
      __pyx_v_visited_count = (__pyx_v_visited_count + 1);

      /* "algorithms.pyx":124
 *     cdef int old_group
 *     while next_node is not None:
 *         if groups[next_node.start] == -1 and groups[next_node.end] == -1:             # <<<<<<<<<<<<<<
 *             groups[next_node.start] = max_group
 *             groups[next_node.end] = max_group
 */
      goto __pyx_L9;
    }

    /* "algorithms.pyx":131
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \             # <<<<<<<<<<<<<<
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 */
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->start]) != -1L) != 0);
    if (!__pyx_t_9) {
      goto __pyx_L13_next_or;
    } else {
    }
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->end]) == -1L) != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_10 = __pyx_t_9;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_L13_next_or:;

    /* "algorithms.pyx":132
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:             # <<<<<<<<<<<<<<
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 *             groups[next_node.end] = max(groups[next_node.start], groups[next_node.end])
 */
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->start]) == -1L) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_10 = __pyx_t_9;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->end]) != -1L) != 0);
    __pyx_t_10 = __pyx_t_9;
    __pyx_L12_bool_binop_done:;

    /* "algorithms.pyx":131
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \             # <<<<<<<<<<<<<<
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 */
    if (__pyx_t_10) {

      /* "algorithms.pyx":133
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])             # <<<<<<<<<<<<<<
 *             groups[next_node.end] = max(groups[next_node.start], groups[next_node.end])
 *             result.add_connection(next_node.start, next_node.end, next_node.data)
 */
      __pyx_t_3 = (__pyx_v_groups[__pyx_v_next_node->end]);
      __pyx_t_4 = (__pyx_v_groups[__pyx_v_next_node->start]);
      if (((__pyx_t_3 > __pyx_t_4) != 0)) {
        __pyx_t_5 = __pyx_t_3;
      } else {
        __pyx_t_5 = __pyx_t_4;
      }
      (__pyx_v_groups[__pyx_v_next_node->start]) = __pyx_t_5;

      /* "algorithms.pyx":134
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 *             groups[next_node.end] = max(groups[next_node.start], groups[next_node.end])             # <<<<<<<<<<<<<<
 *             result.add_connection(next_node.start, next_node.end, next_node.data)
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 */
      __pyx_t_5 = (__pyx_v_groups[__pyx_v_next_node->end]);
      __pyx_t_3 = (__pyx_v_groups[__pyx_v_next_node->start]);
      if (((__pyx_t_5 > __pyx_t_3) != 0)) {
        __pyx_t_4 = __pyx_t_5;
      } else {
        __pyx_t_4 = __pyx_t_3;
      }
      (__pyx_v_groups[__pyx_v_next_node->end]) = __pyx_t_4;

      /* "algorithms.pyx":135
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 *             groups[next_node.end] = max(groups[next_node.start], groups[next_node.end])
 *             result.add_connection(next_node.start, next_node.end, next_node.data)             # <<<<<<<<<<<<<<
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 */
      ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_result->__pyx_vtab)->add_connection(__pyx_v_result, __pyx_v_next_node->start, __pyx_v_next_node->end, __pyx_v_next_node->data, 0);

      /* "algorithms.pyx":136
 *             groups[next_node.end] = max(groups[next_node.start], groups[next_node.end])
 *             result.add_connection(next_node.start, next_node.end, next_node.data)
 *             result.add_connection(next_node.end, next_node.start, next_node.data)             # <<<<<<<<<<<<<<
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:
 */
      ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_result->__pyx_vtab)->add_connection(__pyx_v_result, __pyx_v_next_node->end, __pyx_v_next_node->start, __pyx_v_next_node->data, 0);

      /* "algorithms.pyx":137
 *             result.add_connection(next_node.start, next_node.end, next_node.data)
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1             # <<<<<<<<<<<<<<
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:
 *             if groups[next_node.start] != groups[next_node.end]:
 */
      __pyx_v_visited_count = (__pyx_v_visited_count + 1);

      /* "algorithms.pyx":131
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \             # <<<<<<<<<<<<<<
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 */
      goto __pyx_L9;
    }

    /* "algorithms.pyx":138
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:             # <<<<<<<<<<<<<<
 *             if groups[next_node.start] != groups[next_node.end]:
 *                 j = 0
 */
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->start]) != -1L) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_10 = __pyx_t_9;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->end]) != -1L) != 0);
    __pyx_t_10 = __pyx_t_9;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_10) {

      /* "algorithms.pyx":139
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:
 *             if groups[next_node.start] != groups[next_node.end]:             # <<<<<<<<<<<<<<
 *                 j = 0
 *                 old_group = groups[next_node.end]
 */
      __pyx_t_10 = (((__pyx_v_groups[__pyx_v_next_node->start]) != (__pyx_v_groups[__pyx_v_next_node->end])) != 0);
      if (__pyx_t_10) {

        /* "algorithms.pyx":140
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:
 *             if groups[next_node.start] != groups[next_node.end]:
 *                 j = 0             # <<<<<<<<<<<<<<
 *                 old_group = groups[next_node.end]
 *                 for j in range(graph.getsize()):
 */
        __pyx_v_j = 0;

        /* "algorithms.pyx":141
 *             if groups[next_node.start] != groups[next_node.end]:
 *                 j = 0
 *                 old_group = groups[next_node.end]             # <<<<<<<<<<<<<<
 *                 for j in range(graph.getsize()):
 *                     if groups[j] == old_group:
 */
        __pyx_v_old_group = (__pyx_v_groups[__pyx_v_next_node->end]);

        /* "algorithms.pyx":142
 *                 j = 0
 *                 old_group = groups[next_node.end]
 *                 for j in range(graph.getsize()):             # <<<<<<<<<<<<<<
 *                     if groups[j] == old_group:
 *                         groups[j] = groups[next_node.start]
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_11 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 142, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_12 = __pyx_t_11;
        for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_12; __pyx_t_4+=1) {
          __pyx_v_j = __pyx_t_4;

          /* "algorithms.pyx":143
 *                 old_group = groups[next_node.end]
 *                 for j in range(graph.getsize()):
 *                     if groups[j] == old_group:             # <<<<<<<<<<<<<<
 *                         groups[j] = groups[next_node.start]
 *                 result.add_connection(next_node.start, next_node.end, next_node.data)
 */
          __pyx_t_10 = (((__pyx_v_groups[__pyx_v_j]) == __pyx_v_old_group) != 0);
          if (__pyx_t_10) {

            /* "algorithms.pyx":144
 *                 for j in range(graph.getsize()):
 *                     if groups[j] == old_group:
 *                         groups[j] = groups[next_node.start]             # <<<<<<<<<<<<<<
 *                 result.add_connection(next_node.start, next_node.end, next_node.data)
 *                 result.add_connection(next_node.end, next_node.start, next_node.data)
 */
            (__pyx_v_groups[__pyx_v_j]) = (__pyx_v_groups[__pyx_v_next_node->start]);

            /* "algorithms.pyx":143
 *                 old_group = groups[next_node.end]
 *                 for j in range(graph.getsize()):
 *                     if groups[j] == old_group:             # <<<<<<<<<<<<<<
 *                         groups[j] = groups[next_node.start]
 *                 result.add_connection(next_node.start, next_node.end, next_node.data)
 */
          }
        }

        /* "algorithms.pyx":145
 *                     if groups[j] == old_group:
 *                         groups[j] = groups[next_node.start]
 *                 result.add_connection(next_node.start, next_node.end, next_node.data)             # <<<<<<<<<<<<<<
 *                 result.add_connection(next_node.end, next_node.start, next_node.data)
 *                 visited_count += 1
 */
        ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_result->__pyx_vtab)->add_connection(__pyx_v_result, __pyx_v_next_node->start, __pyx_v_next_node->end, __pyx_v_next_node->data, 0);

        /* "algorithms.pyx":146
 *                         groups[j] = groups[next_node.start]
 *                 result.add_connection(next_node.start, next_node.end, next_node.data)
 *                 result.add_connection(next_node.end, next_node.start, next_node.data)             # <<<<<<<<<<<<<<
 *                 visited_count += 1
 *         if visited_count == graph.getsize():
 */
        ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_result->__pyx_vtab)->add_connection(__pyx_v_result, __pyx_v_next_node->end, __pyx_v_next_node->start, __pyx_v_next_node->data, 0);

        /* "algorithms.pyx":147
 *                 result.add_connection(next_node.start, next_node.end, next_node.data)
 *                 result.add_connection(next_node.end, next_node.start, next_node.data)
 *                 visited_count += 1             # <<<<<<<<<<<<<<
 *         if visited_count == graph.getsize():
 *             break
 */
        __pyx_v_visited_count = (__pyx_v_visited_count + 1);

        /* "algorithms.pyx":139
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:
 *             if groups[next_node.start] != groups[next_node.end]:             # <<<<<<<<<<<<<<
 *                 j = 0
 *                 old_group = groups[next_node.end]
 */
      }

      /* "algorithms.pyx":138
 *             result.add_connection(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:             # <<<<<<<<<<<<<<
 *             if groups[next_node.start] != groups[next_node.end]:
 *                 j = 0
 */
    }
    __pyx_L9:;

    /* "algorithms.pyx":148
 *                 result.add_connection(next_node.end, next_node.start, next_node.data)
 *                 visited_count += 1
 *         if visited_count == graph.getsize():             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_visited_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (__pyx_t_10) {

      /* "algorithms.pyx":149
 *                 visited_count += 1
 *         if visited_count == graph.getsize():
 *             break             # <<<<<<<<<<<<<<
 * 
 *         next_node = queue.queue_pop()
 */
      goto __pyx_L8_break;

      /* "algorithms.pyx":148
 *                 result.add_connection(next_node.end, next_node.start, next_node.data)
 *                 visited_count += 1
 *         if visited_count == graph.getsize():             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }

    /* "algorithms.pyx":151
 *             break
 * 
 *         next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 * 
 *     PyMem_Free(groups)
 */
    __pyx_t_13 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF_SET(__pyx_v_next_node, ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_13));
    __pyx_t_13 = 0;
  }
  __pyx_L8_break:;

  /* "algorithms.pyx":153
 *         next_node = queue.queue_pop()
 * 
 *     PyMem_Free(groups)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  PyMem_Free(__pyx_v_groups);

  /* "algorithms.pyx":154
 * 
 *     PyMem_Free(groups)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cpdef Matrix kruskal_matrix(Matrix graph, tuple args):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "algorithms.pyx":105
 *     return result
 * 
 * cpdef ListGraph kruskal_list(ListGraph graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int i = 0
 *     cdef int visited_count = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("algorithms.kruskal_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_queue);
  __Pyx_XDECREF((PyObject *)__pyx_v_next_node);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10algorithms_5kruskal_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10algorithms_5kruskal_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kruskal_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_args,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kruskal_list", 1, 2, 2, 1); __PYX_ERR(0, 105, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "kruskal_list") < 0)) __PYX_ERR(0, 105, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_11linked_list_ListGraph *)values[0]);
    __pyx_v_args = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kruskal_list", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 105, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("algorithms.kruskal_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_11linked_list_ListGraph, 1, "graph", 0))) __PYX_ERR(0, 105, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_args), (&PyTuple_Type), 1, "args", 1))) __PYX_ERR(0, 105, __pyx_L1_error)
  __pyx_r = __pyx_pf_10algorithms_4kruskal_list(__pyx_self, __pyx_v_graph, __pyx_v_args);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10algorithms_4kruskal_list(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("kruskal_list", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_10algorithms_kruskal_list(__pyx_v_graph, __pyx_v_args, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("algorithms.kruskal_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "algorithms.pyx":156
 *     return result
 * 
 * cpdef Matrix kruskal_matrix(Matrix graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int i = 03
 *     cdef int visited_count = 0
 */

static PyObject *__pyx_pw_10algorithms_7kruskal_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_6matrix_Matrix *__pyx_f_10algorithms_kruskal_matrix(struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_visited_count;
  struct __pyx_obj_6matrix_Matrix *__pyx_v_result = 0;
  struct __pyx_obj_13priorityqueue_PriorityQueue *__pyx_v_queue = 0;
  int __pyx_v_max_group;
  int __pyx_v_j;
  int *__pyx_v_groups;
  struct __pyx_obj_13priorityqueue_CNode *__pyx_v_next_node = 0;
  int __pyx_v_old_group;
  struct __pyx_obj_6matrix_Matrix *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("kruskal_matrix", 0);

  /* "algorithms.pyx":157
 * 
 * cpdef Matrix kruskal_matrix(Matrix graph, tuple args):
 *     cdef int i = 03             # <<<<<<<<<<<<<<
 *     cdef int visited_count = 0
 *     cpdef Matrix result = Matrix(graph.getsize())
 */
  __pyx_v_i = 03;

  /* "algorithms.pyx":158
 * cpdef Matrix kruskal_matrix(Matrix graph, tuple args):
 *     cdef int i = 03
 *     cdef int visited_count = 0             # <<<<<<<<<<<<<<
 *     cpdef Matrix result = Matrix(graph.getsize())
 *     cdef PriorityQueue queue = PriorityQueue()
 */
  __pyx_v_visited_count = 0;

  /* "algorithms.pyx":159
 *     cdef int i = 03
 *     cdef int visited_count = 0
 *     cpdef Matrix result = Matrix(graph.getsize())             # <<<<<<<<<<<<<<
 *     cdef PriorityQueue queue = PriorityQueue()
 *     cdef int max_group = 0
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6matrix_Matrix), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_result = ((struct __pyx_obj_6matrix_Matrix *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "algorithms.pyx":160
 *     cdef int visited_count = 0
 *     cpdef Matrix result = Matrix(graph.getsize())
 *     cdef PriorityQueue queue = PriorityQueue()             # <<<<<<<<<<<<<<
 *     cdef int max_group = 0
 *     cdef int j
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_13priorityqueue_PriorityQueue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_queue = ((struct __pyx_obj_13priorityqueue_PriorityQueue *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "algorithms.pyx":161
 *     cpdef Matrix result = Matrix(graph.getsize())
 *     cdef PriorityQueue queue = PriorityQueue()
 *     cdef int max_group = 0             # <<<<<<<<<<<<<<
 *     cdef int j
 *     cdef int* groups = <int*> PyMem_Malloc(graph.size*sizeof(int))
 */
  __pyx_v_max_group = 0;

  /* "algorithms.pyx":163
 *     cdef int max_group = 0
 *     cdef int j
 *     cdef int* groups = <int*> PyMem_Malloc(graph.size*sizeof(int))             # <<<<<<<<<<<<<<
 *     for i in range(graph.size):
 *         groups[i] = -1
 */
  __pyx_v_groups = ((int *)PyMem_Malloc((__pyx_v_graph->size * (sizeof(int)))));

  /* "algorithms.pyx":164
 *     cdef int j
 *     cdef int* groups = <int*> PyMem_Malloc(graph.size*sizeof(int))
 *     for i in range(graph.size):             # <<<<<<<<<<<<<<
 *         groups[i] = -1
 *         j = 0
 */
  __pyx_t_3 = __pyx_v_graph->size;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "algorithms.pyx":165
 *     cdef int* groups = <int*> PyMem_Malloc(graph.size*sizeof(int))
 *     for i in range(graph.size):
 *         groups[i] = -1             # <<<<<<<<<<<<<<
 *         j = 0
 *         for j in range(i+1, graph.getsize()):
 */
    (__pyx_v_groups[__pyx_v_i]) = -1;

    /* "algorithms.pyx":166
 *     for i in range(graph.size):
 *         groups[i] = -1
 *         j = 0             # <<<<<<<<<<<<<<
 *         for j in range(i+1, graph.getsize()):
 *             if graph.get(i, j) != 0:
 */
    __pyx_v_j = 0;

    /* "algorithms.pyx":167
 *         groups[i] = -1
 *         j = 0
 *         for j in range(i+1, graph.getsize()):             # <<<<<<<<<<<<<<
 *             if graph.get(i, j) != 0:
 *                 queue.add(graph.get(i, j), i, j)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_8 = (__pyx_v_i + 1); __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
      __pyx_v_j = __pyx_t_8;

      /* "algorithms.pyx":168
 *         j = 0
 *         for j in range(i+1, graph.getsize()):
 *             if graph.get(i, j) != 0:             # <<<<<<<<<<<<<<
 *                 queue.add(graph.get(i, j), i, j)
 *     cdef CNode next_node = queue.queue_pop()
 */
      __pyx_t_9 = ((((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_v_i, __pyx_v_j, 0) != 0) != 0);
      if (__pyx_t_9) {

        /* "algorithms.pyx":169
 *         for j in range(i+1, graph.getsize()):
 *             if graph.get(i, j) != 0:
 *                 queue.add(graph.get(i, j), i, j)             # <<<<<<<<<<<<<<
 *     cdef CNode next_node = queue.queue_pop()
 *     visited_count += 1
 */
        (void)(((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->add(__pyx_v_queue, ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_v_i, __pyx_v_j, 0), __pyx_v_i, __pyx_v_j, 0));

        /* "algorithms.pyx":168
 *         j = 0
 *         for j in range(i+1, graph.getsize()):
 *             if graph.get(i, j) != 0:             # <<<<<<<<<<<<<<
 *                 queue.add(graph.get(i, j), i, j)
 *     cdef CNode next_node = queue.queue_pop()
 */
      }
    }
  }

  /* "algorithms.pyx":170
 *             if graph.get(i, j) != 0:
 *                 queue.add(graph.get(i, j), i, j)
 *     cdef CNode next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 *     visited_count += 1
 *     cdef int old_group
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_next_node = ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "algorithms.pyx":171
 *                 queue.add(graph.get(i, j), i, j)
 *     cdef CNode next_node = queue.queue_pop()
 *     visited_count += 1             # <<<<<<<<<<<<<<
 *     cdef int old_group
 *     while next_node is not None:
 */
  __pyx_v_visited_count = (__pyx_v_visited_count + 1);

  /* "algorithms.pyx":173
 *     visited_count += 1
 *     cdef int old_group
 *     while next_node is not None:             # <<<<<<<<<<<<<<
 *         if groups[next_node.start] == -1 and groups[next_node.end] == -1:
 *             groups[next_node.start] = max_group
 */
  while (1) {
    __pyx_t_9 = (((PyObject *)__pyx_v_next_node) != Py_None);
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (!__pyx_t_10) break;

    /* "algorithms.pyx":174
 *     cdef int old_group
 *     while next_node is not None:
 *         if groups[next_node.start] == -1 and groups[next_node.end] == -1:             # <<<<<<<<<<<<<<
 *             groups[next_node.start] = max_group
 *             groups[next_node.end] = max_group
 */
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->start]) == -1L) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_10 = __pyx_t_9;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->end]) == -1L) != 0);
    __pyx_t_10 = __pyx_t_9;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_10) {

      /* "algorithms.pyx":175
 *     while next_node is not None:
 *         if groups[next_node.start] == -1 and groups[next_node.end] == -1:
 *             groups[next_node.start] = max_group             # <<<<<<<<<<<<<<
 *             groups[next_node.end] = max_group
 *             max_group += 1
 */
      (__pyx_v_groups[__pyx_v_next_node->start]) = __pyx_v_max_group;

      /* "algorithms.pyx":176
 *         if groups[next_node.start] == -1 and groups[next_node.end] == -1:
 *             groups[next_node.start] = max_group
 *             groups[next_node.end] = max_group             # <<<<<<<<<<<<<<
 *             max_group += 1
 *             result.set(next_node.start, next_node.end, next_node.data)
 */
      (__pyx_v_groups[__pyx_v_next_node->end]) = __pyx_v_max_group;

      /* "algorithms.pyx":177
 *             groups[next_node.start] = max_group
 *             groups[next_node.end] = max_group
 *             max_group += 1             # <<<<<<<<<<<<<<
 *             result.set(next_node.start, next_node.end, next_node.data)
 *             result.set(next_node.end, next_node.start, next_node.data)
 */
      __pyx_v_max_group = (__pyx_v_max_group + 1);

      /* "algorithms.pyx":178
 *             groups[next_node.end] = max_group
 *             max_group += 1
 *             result.set(next_node.start, next_node.end, next_node.data)             # <<<<<<<<<<<<<<
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 */
      (void)(((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_result->__pyx_vtab)->set(__pyx_v_result, __pyx_v_next_node->start, __pyx_v_next_node->end, __pyx_v_next_node->data, 0));

      /* "algorithms.pyx":179
 *             max_group += 1
 *             result.set(next_node.start, next_node.end, next_node.data)
 *             result.set(next_node.end, next_node.start, next_node.data)             # <<<<<<<<<<<<<<
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \
 */
      (void)(((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_result->__pyx_vtab)->set(__pyx_v_result, __pyx_v_next_node->end, __pyx_v_next_node->start, __pyx_v_next_node->data, 0));

      /* "algorithms.pyx":180
 *             result.set(next_node.start, next_node.end, next_node.data)
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1             # <<<<<<<<<<<<<<
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 */
      __pyx_v_visited_count = (__pyx_v_visited_count + 1);

      /* "algorithms.pyx":174
 *     cdef int old_group
 *     while next_node is not None:
 *         if groups[next_node.start] == -1 and groups[next_node.end] == -1:             # <<<<<<<<<<<<<<
 *             groups[next_node.start] = max_group
 *             groups[next_node.end] = max_group
 */
      goto __pyx_L10;
    }

    /* "algorithms.pyx":181
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \             # <<<<<<<<<<<<<<
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 */
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->start]) != -1L) != 0);
    if (!__pyx_t_9) {
      goto __pyx_L14_next_or;
    } else {
    }
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->end]) == -1L) != 0);
    if (!__pyx_t_9) {
    } else {
      __pyx_t_10 = __pyx_t_9;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_L14_next_or:;

    /* "algorithms.pyx":182
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:             # <<<<<<<<<<<<<<
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 *             groups[next_node.end] = max(groups[next_node.start], groups[next_node.end])
 */
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->start]) == -1L) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_10 = __pyx_t_9;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->end]) != -1L) != 0);
    __pyx_t_10 = __pyx_t_9;
    __pyx_L13_bool_binop_done:;

    /* "algorithms.pyx":181
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \             # <<<<<<<<<<<<<<
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 */
    if (__pyx_t_10) {

      /* "algorithms.pyx":183
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])             # <<<<<<<<<<<<<<
 *             groups[next_node.end] = max(groups[next_node.start], groups[next_node.end])
 *             result.set(next_node.start, next_node.end, next_node.data)
 */
      __pyx_t_3 = (__pyx_v_groups[__pyx_v_next_node->end]);
      __pyx_t_4 = (__pyx_v_groups[__pyx_v_next_node->start]);
      if (((__pyx_t_3 > __pyx_t_4) != 0)) {
        __pyx_t_5 = __pyx_t_3;
      } else {
        __pyx_t_5 = __pyx_t_4;
      }
      (__pyx_v_groups[__pyx_v_next_node->start]) = __pyx_t_5;

      /* "algorithms.pyx":184
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 *             groups[next_node.end] = max(groups[next_node.start], groups[next_node.end])             # <<<<<<<<<<<<<<
 *             result.set(next_node.start, next_node.end, next_node.data)
 *             result.set(next_node.end, next_node.start, next_node.data)
 */
      __pyx_t_5 = (__pyx_v_groups[__pyx_v_next_node->end]);
      __pyx_t_3 = (__pyx_v_groups[__pyx_v_next_node->start]);
      if (((__pyx_t_5 > __pyx_t_3) != 0)) {
        __pyx_t_4 = __pyx_t_5;
      } else {
        __pyx_t_4 = __pyx_t_3;
      }
      (__pyx_v_groups[__pyx_v_next_node->end]) = __pyx_t_4;

      /* "algorithms.pyx":185
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 *             groups[next_node.end] = max(groups[next_node.start], groups[next_node.end])
 *             result.set(next_node.start, next_node.end, next_node.data)             # <<<<<<<<<<<<<<
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 */
      (void)(((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_result->__pyx_vtab)->set(__pyx_v_result, __pyx_v_next_node->start, __pyx_v_next_node->end, __pyx_v_next_node->data, 0));

      /* "algorithms.pyx":186
 *             groups[next_node.end] = max(groups[next_node.start], groups[next_node.end])
 *             result.set(next_node.start, next_node.end, next_node.data)
 *             result.set(next_node.end, next_node.start, next_node.data)             # <<<<<<<<<<<<<<
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:
 */
      (void)(((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_result->__pyx_vtab)->set(__pyx_v_result, __pyx_v_next_node->end, __pyx_v_next_node->start, __pyx_v_next_node->data, 0));

      /* "algorithms.pyx":187
 *             result.set(next_node.start, next_node.end, next_node.data)
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1             # <<<<<<<<<<<<<<
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:
 *             if groups[next_node.start] != groups[next_node.end]:
 */
      __pyx_v_visited_count = (__pyx_v_visited_count + 1);

      /* "algorithms.pyx":181
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] == -1 \             # <<<<<<<<<<<<<<
 *                 or groups[next_node.start] == -1 and groups[next_node.end] != -1:
 *             groups[next_node.start] = max(groups[next_node.start], groups[next_node.end])
 */
      goto __pyx_L10;
    }

    /* "algorithms.pyx":188
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:             # <<<<<<<<<<<<<<
 *             if groups[next_node.start] != groups[next_node.end]:
 *                 j = 0
 */
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->start]) != -1L) != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_10 = __pyx_t_9;
      goto __pyx_L17_bool_binop_done;
    }
    __pyx_t_9 = (((__pyx_v_groups[__pyx_v_next_node->end]) != -1L) != 0);
    __pyx_t_10 = __pyx_t_9;
    __pyx_L17_bool_binop_done:;
    if (__pyx_t_10) {

      /* "algorithms.pyx":189
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:
 *             if groups[next_node.start] != groups[next_node.end]:             # <<<<<<<<<<<<<<
 *                 j = 0
 *                 old_group = groups[next_node.end]
 */
      __pyx_t_10 = (((__pyx_v_groups[__pyx_v_next_node->start]) != (__pyx_v_groups[__pyx_v_next_node->end])) != 0);
      if (__pyx_t_10) {

        /* "algorithms.pyx":190
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:
 *             if groups[next_node.start] != groups[next_node.end]:
 *                 j = 0             # <<<<<<<<<<<<<<
 *                 old_group = groups[next_node.end]
 *                 for j in range(graph.getsize()):
 */
        __pyx_v_j = 0;

        /* "algorithms.pyx":191
 *             if groups[next_node.start] != groups[next_node.end]:
 *                 j = 0
 *                 old_group = groups[next_node.end]             # <<<<<<<<<<<<<<
 *                 for j in range(graph.getsize()):
 *                     if groups[j] == old_group:
 */
        __pyx_v_old_group = (__pyx_v_groups[__pyx_v_next_node->end]);

        /* "algorithms.pyx":192
 *                 j = 0
 *                 old_group = groups[next_node.end]
 *                 for j in range(graph.getsize()):             # <<<<<<<<<<<<<<
 *                     if groups[j] == old_group:
 *                         groups[j] = groups[next_node.start]
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_7 = __pyx_t_6;
        for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_7; __pyx_t_4+=1) {
          __pyx_v_j = __pyx_t_4;

          /* "algorithms.pyx":193
 *                 old_group = groups[next_node.end]
 *                 for j in range(graph.getsize()):
 *                     if groups[j] == old_group:             # <<<<<<<<<<<<<<
 *                         groups[j] = groups[next_node.start]
 *                 result.set(next_node.start, next_node.end, next_node.data)
 */
          __pyx_t_10 = (((__pyx_v_groups[__pyx_v_j]) == __pyx_v_old_group) != 0);
          if (__pyx_t_10) {

            /* "algorithms.pyx":194
 *                 for j in range(graph.getsize()):
 *                     if groups[j] == old_group:
 *                         groups[j] = groups[next_node.start]             # <<<<<<<<<<<<<<
 *                 result.set(next_node.start, next_node.end, next_node.data)
 *                 result.set(next_node.end, next_node.start, next_node.data)
 */
            (__pyx_v_groups[__pyx_v_j]) = (__pyx_v_groups[__pyx_v_next_node->start]);

            /* "algorithms.pyx":193
 *                 old_group = groups[next_node.end]
 *                 for j in range(graph.getsize()):
 *                     if groups[j] == old_group:             # <<<<<<<<<<<<<<
 *                         groups[j] = groups[next_node.start]
 *                 result.set(next_node.start, next_node.end, next_node.data)
 */
          }
        }

        /* "algorithms.pyx":195
 *                     if groups[j] == old_group:
 *                         groups[j] = groups[next_node.start]
 *                 result.set(next_node.start, next_node.end, next_node.data)             # <<<<<<<<<<<<<<
 *                 result.set(next_node.end, next_node.start, next_node.data)
 *                 visited_count += 1
 */
        (void)(((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_result->__pyx_vtab)->set(__pyx_v_result, __pyx_v_next_node->start, __pyx_v_next_node->end, __pyx_v_next_node->data, 0));

        /* "algorithms.pyx":196
 *                         groups[j] = groups[next_node.start]
 *                 result.set(next_node.start, next_node.end, next_node.data)
 *                 result.set(next_node.end, next_node.start, next_node.data)             # <<<<<<<<<<<<<<
 *                 visited_count += 1
 *         if visited_count == graph.getsize():
 */
        (void)(((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_result->__pyx_vtab)->set(__pyx_v_result, __pyx_v_next_node->end, __pyx_v_next_node->start, __pyx_v_next_node->data, 0));

        /* "algorithms.pyx":197
 *                 result.set(next_node.start, next_node.end, next_node.data)
 *                 result.set(next_node.end, next_node.start, next_node.data)
 *                 visited_count += 1             # <<<<<<<<<<<<<<
 *         if visited_count == graph.getsize():
 *             break
 */
        __pyx_v_visited_count = (__pyx_v_visited_count + 1);

        /* "algorithms.pyx":189
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:
 *             if groups[next_node.start] != groups[next_node.end]:             # <<<<<<<<<<<<<<
 *                 j = 0
 *                 old_group = groups[next_node.end]
 */
      }

      /* "algorithms.pyx":188
 *             result.set(next_node.end, next_node.start, next_node.data)
 *             visited_count += 1
 *         elif groups[next_node.start] != -1 and groups[next_node.end] != -1:             # <<<<<<<<<<<<<<
 *             if groups[next_node.start] != groups[next_node.end]:
 *                 j = 0
 */
    }
    __pyx_L10:;

    /* "algorithms.pyx":198
 *                 result.set(next_node.end, next_node.start, next_node.data)
 *                 visited_count += 1
 *         if visited_count == graph.getsize():             # <<<<<<<<<<<<<<
 *             break
 *         next_node = queue.queue_pop()
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_visited_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (__pyx_t_10) {

      /* "algorithms.pyx":199
 *                 visited_count += 1
 *         if visited_count == graph.getsize():
 *             break             # <<<<<<<<<<<<<<
 *         next_node = queue.queue_pop()
 * 
 */
      goto __pyx_L9_break;

      /* "algorithms.pyx":198
 *                 result.set(next_node.end, next_node.start, next_node.data)
 *                 visited_count += 1
 *         if visited_count == graph.getsize():             # <<<<<<<<<<<<<<
 *             break
 *         next_node = queue.queue_pop()
 */
    }

    /* "algorithms.pyx":200
 *         if visited_count == graph.getsize():
 *             break
 *         next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 * 
 *     PyMem_Free(groups)
 */
    __pyx_t_11 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF_SET(__pyx_v_next_node, ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_11));
    __pyx_t_11 = 0;
  }
  __pyx_L9_break:;

  /* "algorithms.pyx":202
 *         next_node = queue.queue_pop()
 * 
 *     PyMem_Free(groups)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  PyMem_Free(__pyx_v_groups);

  /* "algorithms.pyx":203
 * 
 *     PyMem_Free(groups)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "algorithms.pyx":156
 *     return result
 * 
 * cpdef Matrix kruskal_matrix(Matrix graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int i = 03
 *     cdef int visited_count = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("algorithms.kruskal_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF((PyObject *)__pyx_v_queue);
  __Pyx_XDECREF((PyObject *)__pyx_v_next_node);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10algorithms_7kruskal_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10algorithms_7kruskal_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6matrix_Matrix *__pyx_v_graph = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("kruskal_matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_args,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("kruskal_matrix", 1, 2, 2, 1); __PYX_ERR(0, 156, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "kruskal_matrix") < 0)) __PYX_ERR(0, 156, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_6matrix_Matrix *)values[0]);
    __pyx_v_args = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("kruskal_matrix", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 156, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("algorithms.kruskal_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_6matrix_Matrix, 1, "graph", 0))) __PYX_ERR(0, 156, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_args), (&PyTuple_Type), 1, "args", 1))) __PYX_ERR(0, 156, __pyx_L1_error)
  __pyx_r = __pyx_pf_10algorithms_6kruskal_matrix(__pyx_self, __pyx_v_graph, __pyx_v_args);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10algorithms_6kruskal_matrix(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("kruskal_matrix", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_10algorithms_kruskal_matrix(__pyx_v_graph, __pyx_v_args, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("algorithms.kruskal_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "algorithms.pyx":206
 * 
 * 
 * cpdef CPath dijkstra_list(ListGraph graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */

static PyObject *__pyx_pw_10algorithms_9dijkstra_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5cpath_CPath *__pyx_f_10algorithms_dijkstra_list(struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, PyObject *__pyx_v_args, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_start;
  int __pyx_v_end;
  int *__pyx_v_distances;
  int *__pyx_v_prevs;
  int __pyx_v_i;
  struct __pyx_obj_13priorityqueue_PriorityQueue *__pyx_v_queue = 0;
  struct __pyx_obj_13priorityqueue_CNode *__pyx_v_next_node = 0;
  DoublyLinkedList *__pyx_v_connections;
  struct __pyx_obj_5cpath_CPath *__pyx_v_result = 0;
  int __pyx_v_currid;
  struct __pyx_obj_5cpath_CPath *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("dijkstra_list", 0);

  /* "algorithms.pyx":207
 * 
 * cpdef CPath dijkstra_list(ListGraph graph, tuple args):
 *     cdef int start = args[0], end = args[1]             # <<<<<<<<<<<<<<
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 207, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_start = __pyx_t_2;
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 207, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_end = __pyx_t_2;

  /* "algorithms.pyx":208
 * cpdef CPath dijkstra_list(ListGraph graph, tuple args):
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))             # <<<<<<<<<<<<<<
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int i=0
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_distances = ((int *)PyMem_Malloc(__pyx_t_5));

  /* "algorithms.pyx":209
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))             # <<<<<<<<<<<<<<
 *     cdef int i=0
 *     if graph.get_connections(start).size == 0:
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_prevs = ((int *)PyMem_Malloc(__pyx_t_5));

  /* "algorithms.pyx":210
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int i=0             # <<<<<<<<<<<<<<
 *     if graph.get_connections(start).size == 0:
 *         return None
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":211
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int i=0
 *     if graph.get_connections(start).size == 0:             # <<<<<<<<<<<<<<
 *         return None
 *     for i in range(graph.getsize()):
 */
  __pyx_t_6 = ((((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->get_connections(__pyx_v_graph, __pyx_v_start)->size == 0) != 0);
  if (__pyx_t_6) {

    /* "algorithms.pyx":212
 *     cdef int i=0
 *     if graph.get_connections(start).size == 0:
 *         return None             # <<<<<<<<<<<<<<
 *     for i in range(graph.getsize()):
 *         distances[i] = MAX_INT
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_r = ((struct __pyx_obj_5cpath_CPath *)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "algorithms.pyx":211
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int i=0
 *     if graph.get_connections(start).size == 0:             # <<<<<<<<<<<<<<
 *         return None
 *     for i in range(graph.getsize()):
 */
  }

  /* "algorithms.pyx":213
 *     if graph.get_connections(start).size == 0:
 *         return None
 *     for i in range(graph.getsize()):             # <<<<<<<<<<<<<<
 *         distances[i] = MAX_INT
 *         prevs[i] = -1
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_7 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_8; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "algorithms.pyx":214
 *         return None
 *     for i in range(graph.getsize()):
 *         distances[i] = MAX_INT             # <<<<<<<<<<<<<<
 *         prevs[i] = -1
 *     distances[start] = 0
 */
    (__pyx_v_distances[__pyx_v_i]) = __pyx_v_10algorithms_MAX_INT;

    /* "algorithms.pyx":215
 *     for i in range(graph.getsize()):
 *         distances[i] = MAX_INT
 *         prevs[i] = -1             # <<<<<<<<<<<<<<
 *     distances[start] = 0
 *     cdef PriorityQueue queue = PriorityQueue()
 */
    (__pyx_v_prevs[__pyx_v_i]) = -1;
  }

  /* "algorithms.pyx":216
 *         distances[i] = MAX_INT
 *         prevs[i] = -1
 *     distances[start] = 0             # <<<<<<<<<<<<<<
 *     cdef PriorityQueue queue = PriorityQueue()
 *     i = 0
 */
  (__pyx_v_distances[__pyx_v_start]) = 0;

  /* "algorithms.pyx":217
 *         prevs[i] = -1
 *     distances[start] = 0
 *     cdef PriorityQueue queue = PriorityQueue()             # <<<<<<<<<<<<<<
 *     i = 0
 *     for i in range(graph.size):
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_13priorityqueue_PriorityQueue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_queue = ((struct __pyx_obj_13priorityqueue_PriorityQueue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "algorithms.pyx":218
 *     distances[start] = 0
 *     cdef PriorityQueue queue = PriorityQueue()
 *     i = 0             # <<<<<<<<<<<<<<
 *     for i in range(graph.size):
 *         queue.add(distances[i], i, 0)
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":219
 *     cdef PriorityQueue queue = PriorityQueue()
 *     i = 0
 *     for i in range(graph.size):             # <<<<<<<<<<<<<<
 *         queue.add(distances[i], i, 0)
 *     cdef CNode next_node = queue.queue_pop()
 */
  __pyx_t_2 = __pyx_v_graph->size;
  __pyx_t_9 = __pyx_t_2;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "algorithms.pyx":220
 *     i = 0
 *     for i in range(graph.size):
 *         queue.add(distances[i], i, 0)             # <<<<<<<<<<<<<<
 *     cdef CNode next_node = queue.queue_pop()
 *     cdef DoublyLinkedList* connections
 */
    (void)(((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->add(__pyx_v_queue, (__pyx_v_distances[__pyx_v_i]), __pyx_v_i, 0, 0));
  }

  /* "algorithms.pyx":221
 *     for i in range(graph.size):
 *         queue.add(distances[i], i, 0)
 *     cdef CNode next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 *     cdef DoublyLinkedList* connections
 * 
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_next_node = ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "algorithms.pyx":224
 *     cdef DoublyLinkedList* connections
 * 
 *     while next_node is not None:             # <<<<<<<<<<<<<<
 *         if next_node.data == MAX_INT:
 *             break
 */
  while (1) {
    __pyx_t_6 = (((PyObject *)__pyx_v_next_node) != Py_None);
    __pyx_t_11 = (__pyx_t_6 != 0);
    if (!__pyx_t_11) break;

    /* "algorithms.pyx":225
 * 
 *     while next_node is not None:
 *         if next_node.data == MAX_INT:             # <<<<<<<<<<<<<<
 *             break
 *         connections = graph.get_connections(next_node.start)
 */
    __pyx_t_11 = ((__pyx_v_next_node->data == __pyx_v_10algorithms_MAX_INT) != 0);
    if (__pyx_t_11) {

      /* "algorithms.pyx":226
 *     while next_node is not None:
 *         if next_node.data == MAX_INT:
 *             break             # <<<<<<<<<<<<<<
 *         connections = graph.get_connections(next_node.start)
 *         i = 0
 */
      goto __pyx_L9_break;

      /* "algorithms.pyx":225
 * 
 *     while next_node is not None:
 *         if next_node.data == MAX_INT:             # <<<<<<<<<<<<<<
 *             break
 *         connections = graph.get_connections(next_node.start)
 */
    }

    /* "algorithms.pyx":227
 *         if next_node.data == MAX_INT:
 *             break
 *         connections = graph.get_connections(next_node.start)             # <<<<<<<<<<<<<<
 *         i = 0
 *         for i in range(connections.size):
 */
    __pyx_v_connections = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->get_connections(__pyx_v_graph, __pyx_v_next_node->start);

    /* "algorithms.pyx":228
 *             break
 *         connections = graph.get_connections(next_node.start)
 *         i = 0             # <<<<<<<<<<<<<<
 *         for i in range(connections.size):
 *             if distances[next_node.start]+connections.get(i).weight < distances[connections.get(i).value]:
 */
    __pyx_v_i = 0;

    /* "algorithms.pyx":229
 *         connections = graph.get_connections(next_node.start)
 *         i = 0
 *         for i in range(connections.size):             # <<<<<<<<<<<<<<
 *             if distances[next_node.start]+connections.get(i).weight < distances[connections.get(i).value]:
 *                 distances[connections.get(i).value] = distances[next_node.start]+connections.get(i).weight
 */
    __pyx_t_2 = __pyx_v_connections->size;
    __pyx_t_9 = __pyx_t_2;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_i = __pyx_t_10;

      /* "algorithms.pyx":230
 *         i = 0
 *         for i in range(connections.size):
 *             if distances[next_node.start]+connections.get(i).weight < distances[connections.get(i).value]:             # <<<<<<<<<<<<<<
 *                 distances[connections.get(i).value] = distances[next_node.start]+connections.get(i).weight
 *                 prevs[connections.get(i).value] = next_node.start
 */
      __pyx_t_11 = ((((__pyx_v_distances[__pyx_v_next_node->start]) + __pyx_v_connections->get(__pyx_v_i).weight) < (__pyx_v_distances[__pyx_v_connections->get(__pyx_v_i).value])) != 0);
      if (__pyx_t_11) {

        /* "algorithms.pyx":231
 *         for i in range(connections.size):
 *             if distances[next_node.start]+connections.get(i).weight < distances[connections.get(i).value]:
 *                 distances[connections.get(i).value] = distances[next_node.start]+connections.get(i).weight             # <<<<<<<<<<<<<<
 *                 prevs[connections.get(i).value] = next_node.start
 *                 queue.queue_update_node(connections.get(i).value,
 */
        (__pyx_v_distances[__pyx_v_connections->get(__pyx_v_i).value]) = ((__pyx_v_distances[__pyx_v_next_node->start]) + __pyx_v_connections->get(__pyx_v_i).weight);

        /* "algorithms.pyx":232
 *             if distances[next_node.start]+connections.get(i).weight < distances[connections.get(i).value]:
 *                 distances[connections.get(i).value] = distances[next_node.start]+connections.get(i).weight
 *                 prevs[connections.get(i).value] = next_node.start             # <<<<<<<<<<<<<<
 *                 queue.queue_update_node(connections.get(i).value,
 *                                         distances[connections.get(i).value])
 */
        __pyx_t_12 = __pyx_v_next_node->start;
        (__pyx_v_prevs[__pyx_v_connections->get(__pyx_v_i).value]) = __pyx_t_12;

        /* "algorithms.pyx":233
 *                 distances[connections.get(i).value] = distances[next_node.start]+connections.get(i).weight
 *                 prevs[connections.get(i).value] = next_node.start
 *                 queue.queue_update_node(connections.get(i).value,             # <<<<<<<<<<<<<<
 *                                         distances[connections.get(i).value])
 * 
 */
        (void)(((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_update_node(__pyx_v_queue, __pyx_v_connections->get(__pyx_v_i).value, (__pyx_v_distances[__pyx_v_connections->get(__pyx_v_i).value])));

        /* "algorithms.pyx":230
 *         i = 0
 *         for i in range(connections.size):
 *             if distances[next_node.start]+connections.get(i).weight < distances[connections.get(i).value]:             # <<<<<<<<<<<<<<
 *                 distances[connections.get(i).value] = distances[next_node.start]+connections.get(i).weight
 *                 prevs[connections.get(i).value] = next_node.start
 */
      }
    }

    /* "algorithms.pyx":236
 *                                         distances[connections.get(i).value])
 * 
 *         next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 * 
 *     cpdef CPath result = CPath('list')
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_next_node, ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_1));
    __pyx_t_1 = 0;
  }
  __pyx_L9_break:;

  /* "algorithms.pyx":238
 *         next_node = queue.queue_pop()
 * 
 *     cpdef CPath result = CPath('list')             # <<<<<<<<<<<<<<
 *     cdef int currid = end
 *     if prevs[currid] == -1:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5cpath_CPath), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_5cpath_CPath *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "algorithms.pyx":239
 * 
 *     cpdef CPath result = CPath('list')
 *     cdef int currid = end             # <<<<<<<<<<<<<<
 *     if prevs[currid] == -1:
 *         return None
 */
  __pyx_v_currid = __pyx_v_end;

  /* "algorithms.pyx":240
 *     cpdef CPath result = CPath('list')
 *     cdef int currid = end
 *     if prevs[currid] == -1:             # <<<<<<<<<<<<<<
 *         return None
 *     while currid != start:
 */
  __pyx_t_11 = (((__pyx_v_prevs[__pyx_v_currid]) == -1L) != 0);
  if (__pyx_t_11) {

    /* "algorithms.pyx":241
 *     cdef int currid = end
 *     if prevs[currid] == -1:
 *         return None             # <<<<<<<<<<<<<<
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_r = ((struct __pyx_obj_5cpath_CPath *)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "algorithms.pyx":240
 *     cpdef CPath result = CPath('list')
 *     cdef int currid = end
 *     if prevs[currid] == -1:             # <<<<<<<<<<<<<<
 *         return None
 *     while currid != start:
 */
  }

  /* "algorithms.pyx":242
 *     if prevs[currid] == -1:
 *         return None
 *     while currid != start:             # <<<<<<<<<<<<<<
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]
 */
  while (1) {
    __pyx_t_11 = ((__pyx_v_currid != __pyx_v_start) != 0);
    if (!__pyx_t_11) break;

    /* "algorithms.pyx":243
 *         return None
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))             # <<<<<<<<<<<<<<
 *         currid = prevs[currid]
 *     PyMem_Free(distances)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_prevs[__pyx_v_currid])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_currid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(((__pyx_v_distances[__pyx_v_currid]) - (__pyx_v_distances[(__pyx_v_prevs[__pyx_v_currid])]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5cpath_CPathNode), __pyx_t_13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    ((struct __pyx_vtabstruct_5cpath_CPath *)__pyx_v_result->__pyx_vtab)->add(__pyx_v_result, ((struct __pyx_obj_5cpath_CPathNode *)__pyx_t_4));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "algorithms.pyx":244
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]             # <<<<<<<<<<<<<<
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)
 */
    __pyx_v_currid = (__pyx_v_prevs[__pyx_v_currid]);
  }

  /* "algorithms.pyx":245
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]
 *     PyMem_Free(distances)             # <<<<<<<<<<<<<<
 *     PyMem_Free(prevs)
 *     del queue
 */
  PyMem_Free(__pyx_v_distances);

  /* "algorithms.pyx":246
 *         currid = prevs[currid]
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)             # <<<<<<<<<<<<<<
 *     del queue
 *     return result
 */
  PyMem_Free(__pyx_v_prevs);

  /* "algorithms.pyx":247
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)
 *     del queue             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __Pyx_DECREF(((PyObject *)__pyx_v_queue));
  __pyx_v_queue = NULL;

  /* "algorithms.pyx":248
 *     PyMem_Free(prevs)
 *     del queue
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "algorithms.pyx":206
 * 
 * 
 * cpdef CPath dijkstra_list(ListGraph graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("algorithms.dijkstra_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_queue);
  __Pyx_XDECREF((PyObject *)__pyx_v_next_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10algorithms_9dijkstra_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10algorithms_9dijkstra_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dijkstra_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_args,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dijkstra_list", 1, 2, 2, 1); __PYX_ERR(0, 206, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dijkstra_list") < 0)) __PYX_ERR(0, 206, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_11linked_list_ListGraph *)values[0]);
    __pyx_v_args = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dijkstra_list", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 206, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("algorithms.dijkstra_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_11linked_list_ListGraph, 1, "graph", 0))) __PYX_ERR(0, 206, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_args), (&PyTuple_Type), 1, "args", 1))) __PYX_ERR(0, 206, __pyx_L1_error)
  __pyx_r = __pyx_pf_10algorithms_8dijkstra_list(__pyx_self, __pyx_v_graph, __pyx_v_args);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10algorithms_8dijkstra_list(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dijkstra_list", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_10algorithms_dijkstra_list(__pyx_v_graph, __pyx_v_args, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("algorithms.dijkstra_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "algorithms.pyx":251
 * 
 * 
 * cpdef CPath dijkstra_matrix(Matrix graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */

static PyObject *__pyx_pw_10algorithms_11dijkstra_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5cpath_CPath *__pyx_f_10algorithms_dijkstra_matrix(struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, PyObject *__pyx_v_args, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_start;
  int __pyx_v_end;
  int *__pyx_v_distances;
  int *__pyx_v_prevs;
  int __pyx_v_i;
  bool __pyx_v_no_return;
  struct __pyx_obj_13priorityqueue_PriorityQueue *__pyx_v_queue = 0;
  struct __pyx_obj_13priorityqueue_CNode *__pyx_v_next_node = 0;
  struct __pyx_obj_5cpath_CPath *__pyx_v_result = 0;
  int __pyx_v_currid;
  struct __pyx_obj_5cpath_CPath *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("dijkstra_matrix", 0);

  /* "algorithms.pyx":252
 * 
 * cpdef CPath dijkstra_matrix(Matrix graph, tuple args):
 *     cdef int start = args[0], end = args[1]             # <<<<<<<<<<<<<<
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 252, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_start = __pyx_t_2;
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 252, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_end = __pyx_t_2;

  /* "algorithms.pyx":253
 * cpdef CPath dijkstra_matrix(Matrix graph, tuple args):
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))             # <<<<<<<<<<<<<<
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int i=0
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_distances = ((int *)PyMem_Malloc(__pyx_t_5));

  /* "algorithms.pyx":254
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))             # <<<<<<<<<<<<<<
 *     cdef int i=0
 *     cdef bool no_return = False
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 254, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_prevs = ((int *)PyMem_Malloc(__pyx_t_5));

  /* "algorithms.pyx":255
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int i=0             # <<<<<<<<<<<<<<
 *     cdef bool no_return = False
 *     for i in range(graph.getsize()):
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":256
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int i=0
 *     cdef bool no_return = False             # <<<<<<<<<<<<<<
 *     for i in range(graph.getsize()):
 *         if graph.matrix[start].array[i] != 0:
 */
  __pyx_v_no_return = 0;

  /* "algorithms.pyx":257
 *     cdef int i=0
 *     cdef bool no_return = False
 *     for i in range(graph.getsize()):             # <<<<<<<<<<<<<<
 *         if graph.matrix[start].array[i] != 0:
 *             no_return = True
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_7; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "algorithms.pyx":258
 *     cdef bool no_return = False
 *     for i in range(graph.getsize()):
 *         if graph.matrix[start].array[i] != 0:             # <<<<<<<<<<<<<<
 *             no_return = True
 *         distances[i] = MAX_INT
 */
    __pyx_t_8 = ((((__pyx_v_graph->matrix[__pyx_v_start])->array[__pyx_v_i]) != 0) != 0);
    if (__pyx_t_8) {

      /* "algorithms.pyx":259
 *     for i in range(graph.getsize()):
 *         if graph.matrix[start].array[i] != 0:
 *             no_return = True             # <<<<<<<<<<<<<<
 *         distances[i] = MAX_INT
 *         prevs[i] = -1
 */
      __pyx_v_no_return = 1;

      /* "algorithms.pyx":258
 *     cdef bool no_return = False
 *     for i in range(graph.getsize()):
 *         if graph.matrix[start].array[i] != 0:             # <<<<<<<<<<<<<<
 *             no_return = True
 *         distances[i] = MAX_INT
 */
    }

    /* "algorithms.pyx":260
 *         if graph.matrix[start].array[i] != 0:
 *             no_return = True
 *         distances[i] = MAX_INT             # <<<<<<<<<<<<<<
 *         prevs[i] = -1
 *     if not no_return:
 */
    (__pyx_v_distances[__pyx_v_i]) = __pyx_v_10algorithms_MAX_INT;

    /* "algorithms.pyx":261
 *             no_return = True
 *         distances[i] = MAX_INT
 *         prevs[i] = -1             # <<<<<<<<<<<<<<
 *     if not no_return:
 *         return None
 */
    (__pyx_v_prevs[__pyx_v_i]) = -1;
  }

  /* "algorithms.pyx":262
 *         distances[i] = MAX_INT
 *         prevs[i] = -1
 *     if not no_return:             # <<<<<<<<<<<<<<
 *         return None
 *     distances[start] = 0
 */
  __pyx_t_8 = ((!(__pyx_v_no_return != 0)) != 0);
  if (__pyx_t_8) {

    /* "algorithms.pyx":263
 *         prevs[i] = -1
 *     if not no_return:
 *         return None             # <<<<<<<<<<<<<<
 *     distances[start] = 0
 *     cdef PriorityQueue queue = PriorityQueue()
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_r = ((struct __pyx_obj_5cpath_CPath *)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "algorithms.pyx":262
 *         distances[i] = MAX_INT
 *         prevs[i] = -1
 *     if not no_return:             # <<<<<<<<<<<<<<
 *         return None
 *     distances[start] = 0
 */
  }

  /* "algorithms.pyx":264
 *     if not no_return:
 *         return None
 *     distances[start] = 0             # <<<<<<<<<<<<<<
 *     cdef PriorityQueue queue = PriorityQueue()
 *     i = 0
 */
  (__pyx_v_distances[__pyx_v_start]) = 0;

  /* "algorithms.pyx":265
 *         return None
 *     distances[start] = 0
 *     cdef PriorityQueue queue = PriorityQueue()             # <<<<<<<<<<<<<<
 *     i = 0
 *     for i in range(graph.size):
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_13priorityqueue_PriorityQueue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_queue = ((struct __pyx_obj_13priorityqueue_PriorityQueue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "algorithms.pyx":266
 *     distances[start] = 0
 *     cdef PriorityQueue queue = PriorityQueue()
 *     i = 0             # <<<<<<<<<<<<<<
 *     for i in range(graph.size):
 *         queue.add(distances[i], i, 0)
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":267
 *     cdef PriorityQueue queue = PriorityQueue()
 *     i = 0
 *     for i in range(graph.size):             # <<<<<<<<<<<<<<
 *         queue.add(distances[i], i, 0)
 *     cdef CNode next_node = queue.queue_pop()
 */
  __pyx_t_2 = __pyx_v_graph->size;
  __pyx_t_9 = __pyx_t_2;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "algorithms.pyx":268
 *     i = 0
 *     for i in range(graph.size):
 *         queue.add(distances[i], i, 0)             # <<<<<<<<<<<<<<
 *     cdef CNode next_node = queue.queue_pop()
 * 
 */
    (void)(((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->add(__pyx_v_queue, (__pyx_v_distances[__pyx_v_i]), __pyx_v_i, 0, 0));
  }

  /* "algorithms.pyx":269
 *     for i in range(graph.size):
 *         queue.add(distances[i], i, 0)
 *     cdef CNode next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 * 
 *     while next_node is not None:
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_next_node = ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "algorithms.pyx":271
 *     cdef CNode next_node = queue.queue_pop()
 * 
 *     while next_node is not None:             # <<<<<<<<<<<<<<
 *         if next_node.data == MAX_INT:
 *             break
 */
  while (1) {
    __pyx_t_8 = (((PyObject *)__pyx_v_next_node) != Py_None);
    __pyx_t_11 = (__pyx_t_8 != 0);
    if (!__pyx_t_11) break;

    /* "algorithms.pyx":272
 * 
 *     while next_node is not None:
 *         if next_node.data == MAX_INT:             # <<<<<<<<<<<<<<
 *             break
 *         i = 0
 */
    __pyx_t_11 = ((__pyx_v_next_node->data == __pyx_v_10algorithms_MAX_INT) != 0);
    if (__pyx_t_11) {

      /* "algorithms.pyx":273
 *     while next_node is not None:
 *         if next_node.data == MAX_INT:
 *             break             # <<<<<<<<<<<<<<
 *         i = 0
 *         for i in range(graph.getsize()):
 */
      goto __pyx_L10_break;

      /* "algorithms.pyx":272
 * 
 *     while next_node is not None:
 *         if next_node.data == MAX_INT:             # <<<<<<<<<<<<<<
 *             break
 *         i = 0
 */
    }

    /* "algorithms.pyx":274
 *         if next_node.data == MAX_INT:
 *             break
 *         i = 0             # <<<<<<<<<<<<<<
 *         for i in range(graph.getsize()):
 *             if graph.get(next_node.start, i) != 0 :
 */
    __pyx_v_i = 0;

    /* "algorithms.pyx":275
 *             break
 *         i = 0
 *         for i in range(graph.getsize()):             # <<<<<<<<<<<<<<
 *             if graph.get(next_node.start, i) != 0 :
 *                 if distances[next_node.start]+graph.get(next_node.start, i) < distances[i]:
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_7; __pyx_t_2+=1) {
      __pyx_v_i = __pyx_t_2;

      /* "algorithms.pyx":276
 *         i = 0
 *         for i in range(graph.getsize()):
 *             if graph.get(next_node.start, i) != 0 :             # <<<<<<<<<<<<<<
 *                 if distances[next_node.start]+graph.get(next_node.start, i) < distances[i]:
 *                     distances[i] = distances[next_node.start]+graph.get(next_node.start, i)
 */
      __pyx_t_11 = ((((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_v_next_node->start, __pyx_v_i, 0) != 0) != 0);
      if (__pyx_t_11) {

        /* "algorithms.pyx":277
 *         for i in range(graph.getsize()):
 *             if graph.get(next_node.start, i) != 0 :
 *                 if distances[next_node.start]+graph.get(next_node.start, i) < distances[i]:             # <<<<<<<<<<<<<<
 *                     distances[i] = distances[next_node.start]+graph.get(next_node.start, i)
 *                     prevs[i] = next_node.start
 */
        __pyx_t_11 = ((((__pyx_v_distances[__pyx_v_next_node->start]) + ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_v_next_node->start, __pyx_v_i, 0)) < (__pyx_v_distances[__pyx_v_i])) != 0);
        if (__pyx_t_11) {

          /* "algorithms.pyx":278
 *             if graph.get(next_node.start, i) != 0 :
 *                 if distances[next_node.start]+graph.get(next_node.start, i) < distances[i]:
 *                     distances[i] = distances[next_node.start]+graph.get(next_node.start, i)             # <<<<<<<<<<<<<<
 *                     prevs[i] = next_node.start
 *                     queue.queue_update_node(i, distances[i])
 */
          (__pyx_v_distances[__pyx_v_i]) = ((__pyx_v_distances[__pyx_v_next_node->start]) + ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_v_next_node->start, __pyx_v_i, 0));

          /* "algorithms.pyx":279
 *                 if distances[next_node.start]+graph.get(next_node.start, i) < distances[i]:
 *                     distances[i] = distances[next_node.start]+graph.get(next_node.start, i)
 *                     prevs[i] = next_node.start             # <<<<<<<<<<<<<<
 *                     queue.queue_update_node(i, distances[i])
 * 
 */
          __pyx_t_9 = __pyx_v_next_node->start;
          (__pyx_v_prevs[__pyx_v_i]) = __pyx_t_9;

          /* "algorithms.pyx":280
 *                     distances[i] = distances[next_node.start]+graph.get(next_node.start, i)
 *                     prevs[i] = next_node.start
 *                     queue.queue_update_node(i, distances[i])             # <<<<<<<<<<<<<<
 * 
 *         next_node = queue.queue_pop()
 */
          (void)(((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_update_node(__pyx_v_queue, __pyx_v_i, (__pyx_v_distances[__pyx_v_i])));

          /* "algorithms.pyx":277
 *         for i in range(graph.getsize()):
 *             if graph.get(next_node.start, i) != 0 :
 *                 if distances[next_node.start]+graph.get(next_node.start, i) < distances[i]:             # <<<<<<<<<<<<<<
 *                     distances[i] = distances[next_node.start]+graph.get(next_node.start, i)
 *                     prevs[i] = next_node.start
 */
        }

        /* "algorithms.pyx":276
 *         i = 0
 *         for i in range(graph.getsize()):
 *             if graph.get(next_node.start, i) != 0 :             # <<<<<<<<<<<<<<
 *                 if distances[next_node.start]+graph.get(next_node.start, i) < distances[i]:
 *                     distances[i] = distances[next_node.start]+graph.get(next_node.start, i)
 */
      }
    }

    /* "algorithms.pyx":282
 *                     queue.queue_update_node(i, distances[i])
 * 
 *         next_node = queue.queue_pop()             # <<<<<<<<<<<<<<
 * 
 *     cpdef CPath result = CPath('matrix')
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_13priorityqueue_PriorityQueue *)__pyx_v_queue->__pyx_vtab)->queue_pop(__pyx_v_queue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_next_node, ((struct __pyx_obj_13priorityqueue_CNode *)__pyx_t_1));
    __pyx_t_1 = 0;
  }
  __pyx_L10_break:;

  /* "algorithms.pyx":284
 *         next_node = queue.queue_pop()
 * 
 *     cpdef CPath result = CPath('matrix')             # <<<<<<<<<<<<<<
 *     cdef int currid = end
 *     if prevs[currid] == -1:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5cpath_CPath), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_5cpath_CPath *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "algorithms.pyx":285
 * 
 *     cpdef CPath result = CPath('matrix')
 *     cdef int currid = end             # <<<<<<<<<<<<<<
 *     if prevs[currid] == -1:
 *         return None
 */
  __pyx_v_currid = __pyx_v_end;

  /* "algorithms.pyx":286
 *     cpdef CPath result = CPath('matrix')
 *     cdef int currid = end
 *     if prevs[currid] == -1:             # <<<<<<<<<<<<<<
 *         return None
 *     while currid != start:
 */
  __pyx_t_11 = (((__pyx_v_prevs[__pyx_v_currid]) == -1L) != 0);
  if (__pyx_t_11) {

    /* "algorithms.pyx":287
 *     cdef int currid = end
 *     if prevs[currid] == -1:
 *         return None             # <<<<<<<<<<<<<<
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_r = ((struct __pyx_obj_5cpath_CPath *)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "algorithms.pyx":286
 *     cpdef CPath result = CPath('matrix')
 *     cdef int currid = end
 *     if prevs[currid] == -1:             # <<<<<<<<<<<<<<
 *         return None
 *     while currid != start:
 */
  }

  /* "algorithms.pyx":288
 *     if prevs[currid] == -1:
 *         return None
 *     while currid != start:             # <<<<<<<<<<<<<<
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]
 */
  while (1) {
    __pyx_t_11 = ((__pyx_v_currid != __pyx_v_start) != 0);
    if (!__pyx_t_11) break;

    /* "algorithms.pyx":289
 *         return None
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))             # <<<<<<<<<<<<<<
 *         currid = prevs[currid]
 *     PyMem_Free(distances)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_prevs[__pyx_v_currid])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_currid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(((__pyx_v_distances[__pyx_v_currid]) - (__pyx_v_distances[(__pyx_v_prevs[__pyx_v_currid])]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5cpath_CPathNode), __pyx_t_12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    ((struct __pyx_vtabstruct_5cpath_CPath *)__pyx_v_result->__pyx_vtab)->add(__pyx_v_result, ((struct __pyx_obj_5cpath_CPathNode *)__pyx_t_4));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "algorithms.pyx":290
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]             # <<<<<<<<<<<<<<
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)
 */
    __pyx_v_currid = (__pyx_v_prevs[__pyx_v_currid]);
  }

  /* "algorithms.pyx":291
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]
 *     PyMem_Free(distances)             # <<<<<<<<<<<<<<
 *     PyMem_Free(prevs)
 *     del queue
 */
  PyMem_Free(__pyx_v_distances);

  /* "algorithms.pyx":292
 *         currid = prevs[currid]
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)             # <<<<<<<<<<<<<<
 *     del queue
 *     return result
 */
  PyMem_Free(__pyx_v_prevs);

  /* "algorithms.pyx":293
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)
 *     del queue             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __Pyx_DECREF(((PyObject *)__pyx_v_queue));
  __pyx_v_queue = NULL;

  /* "algorithms.pyx":294
 *     PyMem_Free(prevs)
 *     del queue
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cpdef CPath ford_bellman_list(ListGraph graph, tuple args):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "algorithms.pyx":251
 * 
 * 
 * cpdef CPath dijkstra_matrix(Matrix graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("algorithms.dijkstra_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_queue);
  __Pyx_XDECREF((PyObject *)__pyx_v_next_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10algorithms_11dijkstra_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10algorithms_11dijkstra_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6matrix_Matrix *__pyx_v_graph = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dijkstra_matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_args,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dijkstra_matrix", 1, 2, 2, 1); __PYX_ERR(0, 251, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dijkstra_matrix") < 0)) __PYX_ERR(0, 251, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_6matrix_Matrix *)values[0]);
    __pyx_v_args = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dijkstra_matrix", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 251, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("algorithms.dijkstra_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_6matrix_Matrix, 1, "graph", 0))) __PYX_ERR(0, 251, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_args), (&PyTuple_Type), 1, "args", 1))) __PYX_ERR(0, 251, __pyx_L1_error)
  __pyx_r = __pyx_pf_10algorithms_10dijkstra_matrix(__pyx_self, __pyx_v_graph, __pyx_v_args);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10algorithms_10dijkstra_matrix(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dijkstra_matrix", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_10algorithms_dijkstra_matrix(__pyx_v_graph, __pyx_v_args, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("algorithms.dijkstra_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "algorithms.pyx":296
 *     return result
 * 
 * cpdef CPath ford_bellman_list(ListGraph graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */

static PyObject *__pyx_pw_10algorithms_13ford_bellman_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5cpath_CPath *__pyx_f_10algorithms_ford_bellman_list(struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, PyObject *__pyx_v_args, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_start;
  int __pyx_v_end;
  int *__pyx_v_distances;
  int *__pyx_v_prevs;
  int __pyx_v_i;
  DoublyLinkedList *__pyx_v_connections;
  bool __pyx_v_change;
  int __pyx_v_j;
  struct __pyx_obj_5cpath_CPath *__pyx_v_result = 0;
  int __pyx_v_currid;
  struct __pyx_obj_5cpath_CPath *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("ford_bellman_list", 0);

  /* "algorithms.pyx":297
 * 
 * cpdef CPath ford_bellman_list(ListGraph graph, tuple args):
 *     cdef int start = args[0], end = args[1]             # <<<<<<<<<<<<<<
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 297, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_start = __pyx_t_2;
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 297, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_end = __pyx_t_2;

  /* "algorithms.pyx":298
 * cpdef CPath ford_bellman_list(ListGraph graph, tuple args):
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))             # <<<<<<<<<<<<<<
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_distances = ((int *)PyMem_Malloc(__pyx_t_5));

  /* "algorithms.pyx":299
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))             # <<<<<<<<<<<<<<
 * 
 *     cdef int i = 0
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_prevs = ((int *)PyMem_Malloc(__pyx_t_5));

  /* "algorithms.pyx":301
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 * 
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     for i in range(graph.getsize()):
 *         distances[i] = MAX_INT
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":302
 * 
 *     cdef int i = 0
 *     for i in range(graph.getsize()):             # <<<<<<<<<<<<<<
 *         distances[i] = MAX_INT
 *         prevs[i] = -1
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_7; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "algorithms.pyx":303
 *     cdef int i = 0
 *     for i in range(graph.getsize()):
 *         distances[i] = MAX_INT             # <<<<<<<<<<<<<<
 *         prevs[i] = -1
 *     distances[start] = 0
 */
    (__pyx_v_distances[__pyx_v_i]) = __pyx_v_10algorithms_MAX_INT;

    /* "algorithms.pyx":304
 *     for i in range(graph.getsize()):
 *         distances[i] = MAX_INT
 *         prevs[i] = -1             # <<<<<<<<<<<<<<
 *     distances[start] = 0
 * 
 */
    (__pyx_v_prevs[__pyx_v_i]) = -1;
  }

  /* "algorithms.pyx":305
 *         distances[i] = MAX_INT
 *         prevs[i] = -1
 *     distances[start] = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef DoublyLinkedList* connections
 */
  (__pyx_v_distances[__pyx_v_start]) = 0;

  /* "algorithms.pyx":308
 * 
 *     cdef DoublyLinkedList* connections
 *     cdef bool change = True             # <<<<<<<<<<<<<<
 *     cdef int j = 0
 *     while change:
 */
  __pyx_v_change = 1;

  /* "algorithms.pyx":309
 *     cdef DoublyLinkedList* connections
 *     cdef bool change = True
 *     cdef int j = 0             # <<<<<<<<<<<<<<
 *     while change:
 *         change = False
 */
  __pyx_v_j = 0;

  /* "algorithms.pyx":310
 *     cdef bool change = True
 *     cdef int j = 0
 *     while change:             # <<<<<<<<<<<<<<
 *         change = False
 *         i = 0
 */
  while (1) {
    __pyx_t_8 = (__pyx_v_change != 0);
    if (!__pyx_t_8) break;

    /* "algorithms.pyx":311
 *     cdef int j = 0
 *     while change:
 *         change = False             # <<<<<<<<<<<<<<
 *         i = 0
 *         for i in range(graph.getsize()):
 */
    __pyx_v_change = 0;

    /* "algorithms.pyx":312
 *     while change:
 *         change = False
 *         i = 0             # <<<<<<<<<<<<<<
 *         for i in range(graph.getsize()):
 *             connections = graph.get_connections(i)
 */
    __pyx_v_i = 0;

    /* "algorithms.pyx":313
 *         change = False
 *         i = 0
 *         for i in range(graph.getsize()):             # <<<<<<<<<<<<<<
 *             connections = graph.get_connections(i)
 *             j = 0
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_7; __pyx_t_2+=1) {
      __pyx_v_i = __pyx_t_2;

      /* "algorithms.pyx":314
 *         i = 0
 *         for i in range(graph.getsize()):
 *             connections = graph.get_connections(i)             # <<<<<<<<<<<<<<
 *             j = 0
 *             for j in range(connections.size):
 */
      __pyx_v_connections = ((struct __pyx_vtabstruct_11linked_list_ListGraph *)__pyx_v_graph->__pyx_vtab)->get_connections(__pyx_v_graph, __pyx_v_i);

      /* "algorithms.pyx":315
 *         for i in range(graph.getsize()):
 *             connections = graph.get_connections(i)
 *             j = 0             # <<<<<<<<<<<<<<
 *             for j in range(connections.size):
 *                 if distances[connections.get(j).value] != MAX_INT:
 */
      __pyx_v_j = 0;

      /* "algorithms.pyx":316
 *             connections = graph.get_connections(i)
 *             j = 0
 *             for j in range(connections.size):             # <<<<<<<<<<<<<<
 *                 if distances[connections.get(j).value] != MAX_INT:
 *                     if distances[i] > distances[connections.get(j).value] + connections.get(j).weight:
 */
      __pyx_t_9 = __pyx_v_connections->size;
      __pyx_t_10 = __pyx_t_9;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
        __pyx_v_j = __pyx_t_11;

        /* "algorithms.pyx":317
 *             j = 0
 *             for j in range(connections.size):
 *                 if distances[connections.get(j).value] != MAX_INT:             # <<<<<<<<<<<<<<
 *                     if distances[i] > distances[connections.get(j).value] + connections.get(j).weight:
 *                         change = True
 */
        __pyx_t_8 = (((__pyx_v_distances[__pyx_v_connections->get(__pyx_v_j).value]) != __pyx_v_10algorithms_MAX_INT) != 0);
        if (__pyx_t_8) {

          /* "algorithms.pyx":318
 *             for j in range(connections.size):
 *                 if distances[connections.get(j).value] != MAX_INT:
 *                     if distances[i] > distances[connections.get(j).value] + connections.get(j).weight:             # <<<<<<<<<<<<<<
 *                         change = True
 *                         distances[i] = distances[connections.get(j).value] + connections.get(j).weight
 */
          __pyx_t_8 = (((__pyx_v_distances[__pyx_v_i]) > ((__pyx_v_distances[__pyx_v_connections->get(__pyx_v_j).value]) + __pyx_v_connections->get(__pyx_v_j).weight)) != 0);
          if (__pyx_t_8) {

            /* "algorithms.pyx":319
 *                 if distances[connections.get(j).value] != MAX_INT:
 *                     if distances[i] > distances[connections.get(j).value] + connections.get(j).weight:
 *                         change = True             # <<<<<<<<<<<<<<
 *                         distances[i] = distances[connections.get(j).value] + connections.get(j).weight
 *                         prevs[i] = connections.get(j).value
 */
            __pyx_v_change = 1;

            /* "algorithms.pyx":320
 *                     if distances[i] > distances[connections.get(j).value] + connections.get(j).weight:
 *                         change = True
 *                         distances[i] = distances[connections.get(j).value] + connections.get(j).weight             # <<<<<<<<<<<<<<
 *                         prevs[i] = connections.get(j).value
 * 
 */
            (__pyx_v_distances[__pyx_v_i]) = ((__pyx_v_distances[__pyx_v_connections->get(__pyx_v_j).value]) + __pyx_v_connections->get(__pyx_v_j).weight);

            /* "algorithms.pyx":321
 *                         change = True
 *                         distances[i] = distances[connections.get(j).value] + connections.get(j).weight
 *                         prevs[i] = connections.get(j).value             # <<<<<<<<<<<<<<
 * 
 *     cpdef CPath result = CPath('list')
 */
            __pyx_t_12 = __pyx_v_connections->get(__pyx_v_j).value;
            (__pyx_v_prevs[__pyx_v_i]) = __pyx_t_12;

            /* "algorithms.pyx":318
 *             for j in range(connections.size):
 *                 if distances[connections.get(j).value] != MAX_INT:
 *                     if distances[i] > distances[connections.get(j).value] + connections.get(j).weight:             # <<<<<<<<<<<<<<
 *                         change = True
 *                         distances[i] = distances[connections.get(j).value] + connections.get(j).weight
 */
          }

          /* "algorithms.pyx":317
 *             j = 0
 *             for j in range(connections.size):
 *                 if distances[connections.get(j).value] != MAX_INT:             # <<<<<<<<<<<<<<
 *                     if distances[i] > distances[connections.get(j).value] + connections.get(j).weight:
 *                         change = True
 */
        }
      }
    }
  }

  /* "algorithms.pyx":323
 *                         prevs[i] = connections.get(j).value
 * 
 *     cpdef CPath result = CPath('list')             # <<<<<<<<<<<<<<
 *     cdef int currid = end
 *     if prevs[currid] == -1:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5cpath_CPath), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_5cpath_CPath *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "algorithms.pyx":324
 * 
 *     cpdef CPath result = CPath('list')
 *     cdef int currid = end             # <<<<<<<<<<<<<<
 *     if prevs[currid] == -1:
 *         return None
 */
  __pyx_v_currid = __pyx_v_end;

  /* "algorithms.pyx":325
 *     cpdef CPath result = CPath('list')
 *     cdef int currid = end
 *     if prevs[currid] == -1:             # <<<<<<<<<<<<<<
 *         return None
 *     while currid != start:
 */
  __pyx_t_8 = (((__pyx_v_prevs[__pyx_v_currid]) == -1L) != 0);
  if (__pyx_t_8) {

    /* "algorithms.pyx":326
 *     cdef int currid = end
 *     if prevs[currid] == -1:
 *         return None             # <<<<<<<<<<<<<<
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_r = ((struct __pyx_obj_5cpath_CPath *)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "algorithms.pyx":325
 *     cpdef CPath result = CPath('list')
 *     cdef int currid = end
 *     if prevs[currid] == -1:             # <<<<<<<<<<<<<<
 *         return None
 *     while currid != start:
 */
  }

  /* "algorithms.pyx":327
 *     if prevs[currid] == -1:
 *         return None
 *     while currid != start:             # <<<<<<<<<<<<<<
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]
 */
  while (1) {
    __pyx_t_8 = ((__pyx_v_currid != __pyx_v_start) != 0);
    if (!__pyx_t_8) break;

    /* "algorithms.pyx":328
 *         return None
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))             # <<<<<<<<<<<<<<
 *         currid = prevs[currid]
 *     PyMem_Free(distances)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_prevs[__pyx_v_currid])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_currid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(((__pyx_v_distances[__pyx_v_currid]) - (__pyx_v_distances[(__pyx_v_prevs[__pyx_v_currid])]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5cpath_CPathNode), __pyx_t_13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    ((struct __pyx_vtabstruct_5cpath_CPath *)__pyx_v_result->__pyx_vtab)->add(__pyx_v_result, ((struct __pyx_obj_5cpath_CPathNode *)__pyx_t_4));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "algorithms.pyx":329
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]             # <<<<<<<<<<<<<<
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)
 */
    __pyx_v_currid = (__pyx_v_prevs[__pyx_v_currid]);
  }

  /* "algorithms.pyx":330
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]
 *     PyMem_Free(distances)             # <<<<<<<<<<<<<<
 *     PyMem_Free(prevs)
 *     return result
 */
  PyMem_Free(__pyx_v_distances);

  /* "algorithms.pyx":331
 *         currid = prevs[currid]
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  PyMem_Free(__pyx_v_prevs);

  /* "algorithms.pyx":332
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)
 *     return result             # <<<<<<<<<<<<<<
 * 
 * cpdef CPath ford_bellman_matrix(Matrix graph, tuple args):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "algorithms.pyx":296
 *     return result
 * 
 * cpdef CPath ford_bellman_list(ListGraph graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("algorithms.ford_bellman_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10algorithms_13ford_bellman_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10algorithms_13ford_bellman_list(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ford_bellman_list (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_args,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ford_bellman_list", 1, 2, 2, 1); __PYX_ERR(0, 296, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ford_bellman_list") < 0)) __PYX_ERR(0, 296, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_11linked_list_ListGraph *)values[0]);
    __pyx_v_args = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ford_bellman_list", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 296, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("algorithms.ford_bellman_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_11linked_list_ListGraph, 1, "graph", 0))) __PYX_ERR(0, 296, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_args), (&PyTuple_Type), 1, "args", 1))) __PYX_ERR(0, 296, __pyx_L1_error)
  __pyx_r = __pyx_pf_10algorithms_12ford_bellman_list(__pyx_self, __pyx_v_graph, __pyx_v_args);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10algorithms_12ford_bellman_list(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_11linked_list_ListGraph *__pyx_v_graph, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ford_bellman_list", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_10algorithms_ford_bellman_list(__pyx_v_graph, __pyx_v_args, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("algorithms.ford_bellman_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "algorithms.pyx":334
 *     return result
 * 
 * cpdef CPath ford_bellman_matrix(Matrix graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */

static PyObject *__pyx_pw_10algorithms_15ford_bellman_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_5cpath_CPath *__pyx_f_10algorithms_ford_bellman_matrix(struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, PyObject *__pyx_v_args, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_start;
  int __pyx_v_end;
  int *__pyx_v_distances;
  int *__pyx_v_prevs;
  int __pyx_v_i;
  bool __pyx_v_change;
  int __pyx_v_j;
  struct __pyx_obj_5cpath_CPath *__pyx_v_result = 0;
  int __pyx_v_currid;
  struct __pyx_obj_5cpath_CPath *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  int __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("ford_bellman_matrix", 0);

  /* "algorithms.pyx":335
 * 
 * cpdef CPath ford_bellman_matrix(Matrix graph, tuple args):
 *     cdef int start = args[0], end = args[1]             # <<<<<<<<<<<<<<
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 335, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_start = __pyx_t_2;
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 335, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_end = __pyx_t_2;

  /* "algorithms.pyx":336
 * cpdef CPath ford_bellman_matrix(Matrix graph, tuple args):
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))             # <<<<<<<<<<<<<<
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_distances = ((int *)PyMem_Malloc(__pyx_t_5));

  /* "algorithms.pyx":337
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))             # <<<<<<<<<<<<<<
 * 
 *     cdef int i = 0
 */
  __pyx_t_4 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(int))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_prevs = ((int *)PyMem_Malloc(__pyx_t_5));

  /* "algorithms.pyx":339
 *     cdef int* prevs = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 * 
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     for i in range(graph.getsize()):
 *         distances[i] = MAX_INT
 */
  __pyx_v_i = 0;

  /* "algorithms.pyx":340
 * 
 *     cdef int i = 0
 *     for i in range(graph.getsize()):             # <<<<<<<<<<<<<<
 *         distances[i] = MAX_INT
 *         prevs[i] = -1
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_7; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "algorithms.pyx":341
 *     cdef int i = 0
 *     for i in range(graph.getsize()):
 *         distances[i] = MAX_INT             # <<<<<<<<<<<<<<
 *         prevs[i] = -1
 *     distances[start] = 0
 */
    (__pyx_v_distances[__pyx_v_i]) = __pyx_v_10algorithms_MAX_INT;

    /* "algorithms.pyx":342
 *     for i in range(graph.getsize()):
 *         distances[i] = MAX_INT
 *         prevs[i] = -1             # <<<<<<<<<<<<<<
 *     distances[start] = 0
 * 
 */
    (__pyx_v_prevs[__pyx_v_i]) = -1;
  }

  /* "algorithms.pyx":343
 *         distances[i] = MAX_INT
 *         prevs[i] = -1
 *     distances[start] = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef bool change = True
 */
  (__pyx_v_distances[__pyx_v_start]) = 0;

  /* "algorithms.pyx":345
 *     distances[start] = 0
 * 
 *     cdef bool change = True             # <<<<<<<<<<<<<<
 *     cdef int j = 0
 *     while change:
 */
  __pyx_v_change = 1;

  /* "algorithms.pyx":346
 * 
 *     cdef bool change = True
 *     cdef int j = 0             # <<<<<<<<<<<<<<
 *     while change:
 *         change = False
 */
  __pyx_v_j = 0;

  /* "algorithms.pyx":347
 *     cdef bool change = True
 *     cdef int j = 0
 *     while change:             # <<<<<<<<<<<<<<
 *         change = False
 *         i = 0
 */
  while (1) {
    __pyx_t_8 = (__pyx_v_change != 0);
    if (!__pyx_t_8) break;

    /* "algorithms.pyx":348
 *     cdef int j = 0
 *     while change:
 *         change = False             # <<<<<<<<<<<<<<
 *         i = 0
 *         for i in range(graph.getsize()):
 */
    __pyx_v_change = 0;

    /* "algorithms.pyx":349
 *     while change:
 *         change = False
 *         i = 0             # <<<<<<<<<<<<<<
 *         for i in range(graph.getsize()):
 *             j = 0
 */
    __pyx_v_i = 0;

    /* "algorithms.pyx":350
 *         change = False
 *         i = 0
 *         for i in range(graph.getsize()):             # <<<<<<<<<<<<<<
 *             j = 0
 *             for j in range(graph.getsize()):
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __pyx_t_6;
    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_7; __pyx_t_2+=1) {
      __pyx_v_i = __pyx_t_2;

      /* "algorithms.pyx":351
 *         i = 0
 *         for i in range(graph.getsize()):
 *             j = 0             # <<<<<<<<<<<<<<
 *             for j in range(graph.getsize()):
 *                 if graph.get(i, j) != 0 and distances[i] != MAX_INT:
 */
      __pyx_v_j = 0;

      /* "algorithms.pyx":352
 *         for i in range(graph.getsize()):
 *             j = 0
 *             for j in range(graph.getsize()):             # <<<<<<<<<<<<<<
 *                 if graph.get(i, j) != 0 and distances[i] != MAX_INT:
 *                     if distances[j] > distances[i] + graph.get(i,j):
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->getsize(__pyx_v_graph, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 352, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = __pyx_t_9;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
        __pyx_v_j = __pyx_t_11;

        /* "algorithms.pyx":353
 *             j = 0
 *             for j in range(graph.getsize()):
 *                 if graph.get(i, j) != 0 and distances[i] != MAX_INT:             # <<<<<<<<<<<<<<
 *                     if distances[j] > distances[i] + graph.get(i,j):
 *                         change = True
 */
        __pyx_t_12 = ((((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_v_i, __pyx_v_j, 0) != 0) != 0);
        if (__pyx_t_12) {
        } else {
          __pyx_t_8 = __pyx_t_12;
          goto __pyx_L12_bool_binop_done;
        }
        __pyx_t_12 = (((__pyx_v_distances[__pyx_v_i]) != __pyx_v_10algorithms_MAX_INT) != 0);
        __pyx_t_8 = __pyx_t_12;
        __pyx_L12_bool_binop_done:;
        if (__pyx_t_8) {

          /* "algorithms.pyx":354
 *             for j in range(graph.getsize()):
 *                 if graph.get(i, j) != 0 and distances[i] != MAX_INT:
 *                     if distances[j] > distances[i] + graph.get(i,j):             # <<<<<<<<<<<<<<
 *                         change = True
 *                         distances[j] = distances[i] + graph.get(i,j)
 */
          __pyx_t_8 = (((__pyx_v_distances[__pyx_v_j]) > ((__pyx_v_distances[__pyx_v_i]) + ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_v_i, __pyx_v_j, 0))) != 0);
          if (__pyx_t_8) {

            /* "algorithms.pyx":355
 *                 if graph.get(i, j) != 0 and distances[i] != MAX_INT:
 *                     if distances[j] > distances[i] + graph.get(i,j):
 *                         change = True             # <<<<<<<<<<<<<<
 *                         distances[j] = distances[i] + graph.get(i,j)
 *                         prevs[j] = i
 */
            __pyx_v_change = 1;

            /* "algorithms.pyx":356
 *                     if distances[j] > distances[i] + graph.get(i,j):
 *                         change = True
 *                         distances[j] = distances[i] + graph.get(i,j)             # <<<<<<<<<<<<<<
 *                         prevs[j] = i
 * 
 */
            (__pyx_v_distances[__pyx_v_j]) = ((__pyx_v_distances[__pyx_v_i]) + ((struct __pyx_vtabstruct_6matrix_Matrix *)__pyx_v_graph->__pyx_vtab)->get(__pyx_v_graph, __pyx_v_i, __pyx_v_j, 0));

            /* "algorithms.pyx":357
 *                         change = True
 *                         distances[j] = distances[i] + graph.get(i,j)
 *                         prevs[j] = i             # <<<<<<<<<<<<<<
 * 
 *     cpdef CPath result = CPath('matrix')
 */
            (__pyx_v_prevs[__pyx_v_j]) = __pyx_v_i;

            /* "algorithms.pyx":354
 *             for j in range(graph.getsize()):
 *                 if graph.get(i, j) != 0 and distances[i] != MAX_INT:
 *                     if distances[j] > distances[i] + graph.get(i,j):             # <<<<<<<<<<<<<<
 *                         change = True
 *                         distances[j] = distances[i] + graph.get(i,j)
 */
          }

          /* "algorithms.pyx":353
 *             j = 0
 *             for j in range(graph.getsize()):
 *                 if graph.get(i, j) != 0 and distances[i] != MAX_INT:             # <<<<<<<<<<<<<<
 *                     if distances[j] > distances[i] + graph.get(i,j):
 *                         change = True
 */
        }
      }
    }
  }

  /* "algorithms.pyx":359
 *                         prevs[j] = i
 * 
 *     cpdef CPath result = CPath('matrix')             # <<<<<<<<<<<<<<
 *     cdef int currid = end
 *     if prevs[currid] == -1:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5cpath_CPath), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((struct __pyx_obj_5cpath_CPath *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "algorithms.pyx":360
 * 
 *     cpdef CPath result = CPath('matrix')
 *     cdef int currid = end             # <<<<<<<<<<<<<<
 *     if prevs[currid] == -1:
 *         return None
 */
  __pyx_v_currid = __pyx_v_end;

  /* "algorithms.pyx":361
 *     cpdef CPath result = CPath('matrix')
 *     cdef int currid = end
 *     if prevs[currid] == -1:             # <<<<<<<<<<<<<<
 *         return None
 *     while currid != start:
 */
  __pyx_t_8 = (((__pyx_v_prevs[__pyx_v_currid]) == -1L) != 0);
  if (__pyx_t_8) {

    /* "algorithms.pyx":362
 *     cdef int currid = end
 *     if prevs[currid] == -1:
 *         return None             # <<<<<<<<<<<<<<
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_r = ((struct __pyx_obj_5cpath_CPath *)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "algorithms.pyx":361
 *     cpdef CPath result = CPath('matrix')
 *     cdef int currid = end
 *     if prevs[currid] == -1:             # <<<<<<<<<<<<<<
 *         return None
 *     while currid != start:
 */
  }

  /* "algorithms.pyx":363
 *     if prevs[currid] == -1:
 *         return None
 *     while currid != start:             # <<<<<<<<<<<<<<
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]
 */
  while (1) {
    __pyx_t_8 = ((__pyx_v_currid != __pyx_v_start) != 0);
    if (!__pyx_t_8) break;

    /* "algorithms.pyx":364
 *         return None
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))             # <<<<<<<<<<<<<<
 *         currid = prevs[currid]
 *     PyMem_Free(distances)
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_prevs[__pyx_v_currid])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_currid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_int(((__pyx_v_distances[__pyx_v_currid]) - (__pyx_v_distances[(__pyx_v_prevs[__pyx_v_currid])]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_4);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5cpath_CPathNode), __pyx_t_13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    ((struct __pyx_vtabstruct_5cpath_CPath *)__pyx_v_result->__pyx_vtab)->add(__pyx_v_result, ((struct __pyx_obj_5cpath_CPathNode *)__pyx_t_4));
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "algorithms.pyx":365
 *     while currid != start:
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]             # <<<<<<<<<<<<<<
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)
 */
    __pyx_v_currid = (__pyx_v_prevs[__pyx_v_currid]);
  }

  /* "algorithms.pyx":366
 *         result.add(CPathNode(prevs[currid], currid, distances[currid]-distances[prevs[currid]]))
 *         currid = prevs[currid]
 *     PyMem_Free(distances)             # <<<<<<<<<<<<<<
 *     PyMem_Free(prevs)
 *     return result
 */
  PyMem_Free(__pyx_v_distances);

  /* "algorithms.pyx":367
 *         currid = prevs[currid]
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)             # <<<<<<<<<<<<<<
 *     return result
 */
  PyMem_Free(__pyx_v_prevs);

  /* "algorithms.pyx":368
 *     PyMem_Free(distances)
 *     PyMem_Free(prevs)
 *     return result             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "algorithms.pyx":334
 *     return result
 * 
 * cpdef CPath ford_bellman_matrix(Matrix graph, tuple args):             # <<<<<<<<<<<<<<
 *     cdef int start = args[0], end = args[1]
 *     cdef int* distances = <int*> PyMem_Malloc(graph.getsize()*sizeof(int))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("algorithms.ford_bellman_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_10algorithms_15ford_bellman_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10algorithms_15ford_bellman_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6matrix_Matrix *__pyx_v_graph = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ford_bellman_matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_args,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("ford_bellman_matrix", 1, 2, 2, 1); __PYX_ERR(0, 334, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "ford_bellman_matrix") < 0)) __PYX_ERR(0, 334, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_graph = ((struct __pyx_obj_6matrix_Matrix *)values[0]);
    __pyx_v_args = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ford_bellman_matrix", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 334, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("algorithms.ford_bellman_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_graph), __pyx_ptype_6matrix_Matrix, 1, "graph", 0))) __PYX_ERR(0, 334, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_args), (&PyTuple_Type), 1, "args", 1))) __PYX_ERR(0, 334, __pyx_L1_error)
  __pyx_r = __pyx_pf_10algorithms_14ford_bellman_matrix(__pyx_self, __pyx_v_graph, __pyx_v_args);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10algorithms_14ford_bellman_matrix(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6matrix_Matrix *__pyx_v_graph, PyObject *__pyx_v_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("ford_bellman_matrix", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_10algorithms_ford_bellman_matrix(__pyx_v_graph, __pyx_v_args, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("algorithms.ford_bellman_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {"prim_list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10algorithms_1prim_list, METH_VARARGS|METH_KEYWORDS, 0},
  {"prim_matrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10algorithms_3prim_matrix, METH_VARARGS|METH_KEYWORDS, 0},
  {"kruskal_list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10algorithms_5kruskal_list, METH_VARARGS|METH_KEYWORDS, 0},
  {"kruskal_matrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10algorithms_7kruskal_matrix, METH_VARARGS|METH_KEYWORDS, 0},
  {"dijkstra_list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10algorithms_9dijkstra_list, METH_VARARGS|METH_KEYWORDS, 0},
  {"dijkstra_matrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10algorithms_11dijkstra_matrix, METH_VARARGS|METH_KEYWORDS, 0},
  {"ford_bellman_list", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10algorithms_13ford_bellman_list, METH_VARARGS|METH_KEYWORDS, 0},
  {"ford_bellman_matrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10algorithms_15ford_bellman_matrix, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_algorithms(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_algorithms},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "algorithms",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ListGraph, __pyx_k_ListGraph, sizeof(__pyx_k_ListGraph), 0, 0, 1, 1},
  {&__pyx_n_s_PriorityQueue, __pyx_k_PriorityQueue, sizeof(__pyx_k_PriorityQueue), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_default_timer, __pyx_k_default_timer, sizeof(__pyx_k_default_timer), 0, 0, 1, 1},
  {&__pyx_n_s_graph, __pyx_k_graph, sizeof(__pyx_k_graph), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_linked_list, __pyx_k_linked_list, sizeof(__pyx_k_linked_list), 0, 0, 1, 1},
  {&__pyx_n_s_list, __pyx_k_list, sizeof(__pyx_k_list), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_priorityqueue, __pyx_k_priorityqueue, sizeof(__pyx_k_priorityqueue), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_timeit, __pyx_k_timeit, sizeof(__pyx_k_timeit), 0, 0, 1, 1},
  {&__pyx_n_s_timer, __pyx_k_timer, sizeof(__pyx_k_timer), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 31, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "algorithms.pyx":238
 *         next_node = queue.queue_pop()
 * 
 *     cpdef CPath result = CPath('list')             # <<<<<<<<<<<<<<
 *     cdef int currid = end
 *     if prevs[currid] == -1:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_n_s_list); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "algorithms.pyx":284
 *         next_node = queue.queue_pop()
 * 
 *     cpdef CPath result = CPath('matrix')             # <<<<<<<<<<<<<<
 *     cdef int currid = end
 *     if prevs[currid] == -1:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_n_s_matrix); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("priorityqueue"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_13priorityqueue_CNode = __Pyx_ImportType(__pyx_t_1, "priorityqueue", "CNode", sizeof(struct __pyx_obj_13priorityqueue_CNode), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_13priorityqueue_CNode) __PYX_ERR(1, 16, __pyx_L1_error)
  __pyx_ptype_13priorityqueue_PriorityQueue = __Pyx_ImportType(__pyx_t_1, "priorityqueue", "PriorityQueue", sizeof(struct __pyx_obj_13priorityqueue_PriorityQueue), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_13priorityqueue_PriorityQueue) __PYX_ERR(1, 21, __pyx_L1_error)
  __pyx_vtabptr_13priorityqueue_PriorityQueue = (struct __pyx_vtabstruct_13priorityqueue_PriorityQueue*)__Pyx_GetVtable(__pyx_ptype_13priorityqueue_PriorityQueue->tp_dict); if (unlikely(!__pyx_vtabptr_13priorityqueue_PriorityQueue)) __PYX_ERR(1, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("linked_list"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_11linked_list_PNode = __Pyx_ImportType(__pyx_t_1, "linked_list", "PNode", sizeof(struct __pyx_obj_11linked_list_PNode), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_11linked_list_PNode) __PYX_ERR(2, 22, __pyx_L1_error)
  __pyx_ptype_11linked_list_ListGraphRoot = __Pyx_ImportType(__pyx_t_1, "linked_list", "ListGraphRoot", sizeof(struct __pyx_obj_11linked_list_ListGraphRoot), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_11linked_list_ListGraphRoot) __PYX_ERR(2, 27, __pyx_L1_error)
  __pyx_vtabptr_11linked_list_ListGraphRoot = (struct __pyx_vtabstruct_11linked_list_ListGraphRoot*)__Pyx_GetVtable(__pyx_ptype_11linked_list_ListGraphRoot->tp_dict); if (unlikely(!__pyx_vtabptr_11linked_list_ListGraphRoot)) __PYX_ERR(2, 27, __pyx_L1_error)
  __pyx_ptype_11linked_list_ListGraph = __Pyx_ImportType(__pyx_t_1, "linked_list", "ListGraph", sizeof(struct __pyx_obj_11linked_list_ListGraph), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_11linked_list_ListGraph) __PYX_ERR(2, 50, __pyx_L1_error)
  __pyx_vtabptr_11linked_list_ListGraph = (struct __pyx_vtabstruct_11linked_list_ListGraph*)__Pyx_GetVtable(__pyx_ptype_11linked_list_ListGraph->tp_dict); if (unlikely(!__pyx_vtabptr_11linked_list_ListGraph)) __PYX_ERR(2, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("matrix"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6matrix_Matrix = __Pyx_ImportType(__pyx_t_1, "matrix", "Matrix", sizeof(struct __pyx_obj_6matrix_Matrix), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6matrix_Matrix) __PYX_ERR(3, 19, __pyx_L1_error)
  __pyx_vtabptr_6matrix_Matrix = (struct __pyx_vtabstruct_6matrix_Matrix*)__Pyx_GetVtable(__pyx_ptype_6matrix_Matrix->tp_dict); if (unlikely(!__pyx_vtabptr_6matrix_Matrix)) __PYX_ERR(3, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("cpath"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5cpath_CPathNode = __Pyx_ImportType(__pyx_t_1, "cpath", "CPathNode", sizeof(struct __pyx_obj_5cpath_CPathNode), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cpath_CPathNode) __PYX_ERR(4, 2, __pyx_L1_error)
  __pyx_ptype_5cpath_CPath = __Pyx_ImportType(__pyx_t_1, "cpath", "CPath", sizeof(struct __pyx_obj_5cpath_CPath), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5cpath_CPath) __PYX_ERR(4, 7, __pyx_L1_error)
  __pyx_vtabptr_5cpath_CPath = (struct __pyx_vtabstruct_5cpath_CPath*)__Pyx_GetVtable(__pyx_ptype_5cpath_CPath->tp_dict); if (unlikely(!__pyx_vtabptr_5cpath_CPath)) __PYX_ERR(4, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initalgorithms(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initalgorithms(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_algorithms(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_algorithms(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_algorithms(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'algorithms' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_algorithms(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("algorithms", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_algorithms) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "algorithms")) {
      if (unlikely(PyDict_SetItemString(modules, "algorithms", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "algorithms.pyx":10
 * from linked_list cimport ListGraph
 * from matrix cimport Matrix
 * from priorityqueue import PriorityQueue             # <<<<<<<<<<<<<<
 * from cpath cimport CPathNode
 * from cpath cimport CPath
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_PriorityQueue);
  __Pyx_GIVEREF(__pyx_n_s_PriorityQueue);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PriorityQueue);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_priorityqueue, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "algorithms.pyx":13
 * from cpath cimport CPathNode
 * from cpath cimport CPath
 * from linked_list import ListGraph             # <<<<<<<<<<<<<<
 * from matrix cimport Matrix, DynamicArray
 * from timeit import default_timer as timer
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ListGraph);
  __Pyx_GIVEREF(__pyx_n_s_ListGraph);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ListGraph);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_linked_list, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "algorithms.pyx":15
 * from linked_list import ListGraph
 * from matrix cimport Matrix, DynamicArray
 * from timeit import default_timer as timer             # <<<<<<<<<<<<<<
 * 
 * cdef int MAX_INT = 2147483000
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_default_timer);
  __Pyx_GIVEREF(__pyx_n_s_default_timer);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_default_timer);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_timeit, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_default_timer); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_timer, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "algorithms.pyx":17
 * from timeit import default_timer as timer
 * 
 * cdef int MAX_INT = 2147483000             # <<<<<<<<<<<<<<
 * 
 * cpdef ListGraph prim_list(ListGraph graph, tuple args):
 */
  __pyx_v_10algorithms_MAX_INT = 0x7FFFFD78;

  /* "algorithms.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: sources = DoublyLinkedList.cpp
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init algorithms", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init algorithms");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
